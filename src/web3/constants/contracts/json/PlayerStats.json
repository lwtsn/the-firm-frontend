{
  "address": "0x54B8d8E2455946f2A5B8982283f2359812e815ce",
  "abi": [
    {
      "inputs": [],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "who",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "strengthIncrease",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "dexterityIncrease",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "defenceIncrease",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "constitutionIncrease",
          "type": "uint256"
        }
      ],
      "name": "PlayerBattleStatsUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "who",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "degeneracyIncrease",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "chadaryIncrease",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "unrekableIncrease",
          "type": "uint256"
        }
      ],
      "name": "PlayerFarmingStatsUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "previousAdminRole",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "newAdminRole",
          "type": "bytes32"
        }
      ],
      "name": "RoleAdminChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleGranted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleRevoked",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "ADMIN",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "DEFAULT_ADMIN_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "PLAYER_MANAGER",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_who",
          "type": "address"
        }
      ],
      "name": "createBasePlayer",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_who",
          "type": "address"
        }
      ],
      "name": "getPlayerBattleStats",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "baseStrength",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "baseDexterity",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "baseDefence",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "baseConstitution",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_who",
          "type": "address"
        }
      ],
      "name": "getPlayerFarmingStats",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "_degeneracy",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_chadary",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_unrekable",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_who",
          "type": "address"
        }
      ],
      "name": "getPlayerStats",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "level",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "experience",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "baseHealth",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "currentHealth",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "isPlayer",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        }
      ],
      "name": "getRoleAdmin",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "grantRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "hasRole",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_who",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_strength",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_dexterity",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_defence",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_constitution",
          "type": "uint256"
        }
      ],
      "name": "increaseBattleStats",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_who",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_chadary",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_degeneracy",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_unrekable",
          "type": "uint256"
        }
      ],
      "name": "increaseFarmingStats",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "playerManager",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "renounceRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "revokeRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_playerManager",
          "type": "address"
        }
      ],
      "name": "setPlayerManager",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x0956660f339b265c05a34e72fa72c061f9d3ee0ce39202d343a186bca590e4eb",
  "receipt": {
    "to": null,
    "from": "0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266",
    "contractAddress": "0x54B8d8E2455946f2A5B8982283f2359812e815ce",
    "transactionIndex": 0,
    "gasUsed": "1052486",
    "logsBloom": "0x
    "blockHash": "0x6a05efe9a745a6db3afe825d7073a089fa42543c53697f5498899907aa92472e",
    "transactionHash": "0x0956660f339b265c05a34e72fa72c061f9d3ee0ce39202d343a186bca590e4eb",
    "logs": [
      {
        "transactionIndex": 0,
        "blockNumber": 14885533,
        "transactionHash": "0x0956660f339b265c05a34e72fa72c061f9d3ee0ce39202d343a186bca590e4eb",
        "address": "0x54B8d8E2455946f2A5B8982283f2359812e815ce",
        "topics": [
          "0x2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d",
          "0xdf8b4c520ffe197c5343c6f5aec59570151ef9a492f2c624fd45ddde6135ec42",
          "0x000000000000000000000000f39fd6e51aad88f6f4ce6ab8827279cfffb92266",
          "0x000000000000000000000000f39fd6e51aad88f6f4ce6ab8827279cfffb92266"
        ],
        "data": "0x",
        "logIndex": 0,
        "blockHash": "0x6a05efe9a745a6db3afe825d7073a089fa42543c53697f5498899907aa92472e"
      },
      {
        "transactionIndex": 0,
        "blockNumber": 14885533,
        "transactionHash": "0x0956660f339b265c05a34e72fa72c061f9d3ee0ce39202d343a186bca590e4eb",
        "address": "0x54B8d8E2455946f2A5B8982283f2359812e815ce",
        "topics": [
          "0xbd79b86ffe0ab8e8776151514217cd7cacd52c909f66475c3af44e129f0b00ff",
          "0xbea3dc2cfb254f821d5674bb49272a241e44cf76c754fddc24aa28318f0800a0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0xdf8b4c520ffe197c5343c6f5aec59570151ef9a492f2c624fd45ddde6135ec42"
        ],
        "data": "0x",
        "logIndex": 1,
        "blockHash": "0x6a05efe9a745a6db3afe825d7073a089fa42543c53697f5498899907aa92472e"
      }
    ],
    "blockNumber": 14885533,
    "cumulativeGasUsed": "1052486",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "37b95ca224cde79ad518368e637cbc4f",
  "metadata": "{\"compiler\":{\"version\":\"0.8.9+commit.e5eed63a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"who\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"strengthIncrease\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"dexterityIncrease\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"defenceIncrease\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"constitutionIncrease\",\"type\":\"uint256\"}],\"name\":\"PlayerBattleStatsUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"who\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"degeneracyIncrease\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"chadaryIncrease\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"unrekableIncrease\",\"type\":\"uint256\"}],\"name\":\"PlayerFarmingStatsUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"previousAdminRole\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"newAdminRole\",\"type\":\"bytes32\"}],\"name\":\"RoleAdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"ADMIN\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DEFAULT_ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PLAYER_MANAGER\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_who\",\"type\":\"address\"}],\"name\":\"createBasePlayer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_who\",\"type\":\"address\"}],\"name\":\"getPlayerBattleStats\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"baseStrength\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"baseDexterity\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"baseDefence\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"baseConstitution\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_who\",\"type\":\"address\"}],\"name\":\"getPlayerFarmingStats\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_degeneracy\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_chadary\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_unrekable\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_who\",\"type\":\"address\"}],\"name\":\"getPlayerStats\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"level\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"experience\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"baseHealth\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"currentHealth\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isPlayer\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleAdmin\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_who\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_strength\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_dexterity\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_defence\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_constitution\",\"type\":\"uint256\"}],\"name\":\"increaseBattleStats\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_who\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_chadary\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_degeneracy\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_unrekable\",\"type\":\"uint256\"}],\"name\":\"increaseFarmingStats\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"playerManager\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_playerManager\",\"type\":\"address\"}],\"name\":\"setPlayerManager\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"getRoleAdmin(bytes32)\":{\"details\":\"Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}.\"},\"grantRole(bytes32,address)\":{\"details\":\"Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role.\"},\"hasRole(bytes32,address)\":{\"details\":\"Returns `true` if `account` has been granted `role`.\"},\"renounceRole(bytes32,address)\":{\"details\":\"Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`.\"},\"revokeRole(bytes32,address)\":{\"details\":\"Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role.\"},\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/player/PlayerStats.sol\":\"PlayerStats\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/AccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (access/AccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAccessControl.sol\\\";\\nimport \\\"../utils/Context.sol\\\";\\nimport \\\"../utils/Strings.sol\\\";\\nimport \\\"../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Contract module that allows children to implement role-based access\\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\\n * members except through off-chain means by accessing the contract event logs. Some\\n * applications may benefit from on-chain enumerability, for those cases see\\n * {AccessControlEnumerable}.\\n *\\n * Roles are referred to by their `bytes32` identifier. These should be exposed\\n * in the external API and be unique. The best way to achieve this is by\\n * using `public constant` hash digests:\\n *\\n * ```\\n * bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\");\\n * ```\\n *\\n * Roles can be used to represent a set of permissions. To restrict access to a\\n * function call, use {hasRole}:\\n *\\n * ```\\n * function foo() public {\\n *     require(hasRole(MY_ROLE, msg.sender));\\n *     ...\\n * }\\n * ```\\n *\\n * Roles can be granted and revoked dynamically via the {grantRole} and\\n * {revokeRole} functions. Each role has an associated admin role, and only\\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\\n *\\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\\n * that only accounts with this role will be able to grant or revoke other\\n * roles. More complex role relationships can be created by using\\n * {_setRoleAdmin}.\\n *\\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\\n * grant and revoke this role. Extra precautions should be taken to secure\\n * accounts that have been granted it.\\n */\\nabstract contract AccessControl is Context, IAccessControl, ERC165 {\\n    struct RoleData {\\n        mapping(address => bool) members;\\n        bytes32 adminRole;\\n    }\\n\\n    mapping(bytes32 => RoleData) private _roles;\\n\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n    /**\\n     * @dev Modifier that checks that an account has a specific role. Reverts\\n     * with a standardized message including the required role.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     *\\n     * _Available since v4.1._\\n     */\\n    modifier onlyRole(bytes32 role) {\\n        _checkRole(role);\\n        _;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IAccessControl).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) public view virtual override returns (bool) {\\n        return _roles[role].members[account];\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `_msgSender()` is missing `role`.\\n     * Overriding this function changes the behavior of the {onlyRole} modifier.\\n     *\\n     * Format of the revert message is described in {_checkRole}.\\n     *\\n     * _Available since v4.6._\\n     */\\n    function _checkRole(bytes32 role) internal view virtual {\\n        _checkRole(role, _msgSender());\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `account` is missing `role`.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     */\\n    function _checkRole(bytes32 role, address account) internal view virtual {\\n        if (!hasRole(role, account)) {\\n            revert(\\n                string(\\n                    abi.encodePacked(\\n                        \\\"AccessControl: account \\\",\\n                        Strings.toHexString(uint160(account), 20),\\n                        \\\" is missing role \\\",\\n                        Strings.toHexString(uint256(role), 32)\\n                    )\\n                )\\n            );\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) public view virtual override returns (bytes32) {\\n        return _roles[role].adminRole;\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been revoked `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) public virtual override {\\n        require(account == _msgSender(), \\\"AccessControl: can only renounce roles for self\\\");\\n\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event. Note that unlike {grantRole}, this function doesn't perform any\\n     * checks on the calling account.\\n     *\\n     * [WARNING]\\n     * ====\\n     * This function should only be called from the constructor when setting\\n     * up the initial roles for the system.\\n     *\\n     * Using this function in any other way is effectively circumventing the admin\\n     * system imposed by {AccessControl}.\\n     * ====\\n     *\\n     * NOTE: This function is deprecated in favor of {_grantRole}.\\n     */\\n    function _setupRole(bytes32 role, address account) internal virtual {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Sets `adminRole` as ``role``'s admin role.\\n     *\\n     * Emits a {RoleAdminChanged} event.\\n     */\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\\n        bytes32 previousAdminRole = getRoleAdmin(role);\\n        _roles[role].adminRole = adminRole;\\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * Internal function without access restriction.\\n     */\\n    function _grantRole(bytes32 role, address account) internal virtual {\\n        if (!hasRole(role, account)) {\\n            _roles[role].members[account] = true;\\n            emit RoleGranted(role, account, _msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * Internal function without access restriction.\\n     */\\n    function _revokeRole(bytes32 role, address account) internal virtual {\\n        if (hasRole(role, account)) {\\n            _roles[role].members[account] = false;\\n            emit RoleRevoked(role, account, _msgSender());\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xb4d87ee2ead4bd192b41c128f287d4b7f24b9e0cd740cc9b476881c461286007\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/IAccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n */\\ninterface IAccessControl {\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     *\\n     * _Available since v3.1._\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {AccessControl-_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) external;\\n}\\n\",\"keccak256\":\"0x59ce320a585d7e1f163cd70390a0ef2ff9cec832e2aa544293a00692465a7a57\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n}\\n\",\"keccak256\":\"0x32c202bd28995dd20c4347b7c6467a6d3241c74c8ad3edcbb610cd9205916c45\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0xd10975de010d89fd1c78dc5e8a9a7e7f496198085c151648f20cba166b32582b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (utils/math/SafeMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n// CAUTION\\n// This version of SafeMath should only be used with Solidity 0.8 or later,\\n// because it relies on the compiler's built in overflow checks.\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations.\\n *\\n * NOTE: `SafeMath` is generally not needed starting with Solidity 0.8, since the compiler\\n * now has built in overflow checking.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c < a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b > a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n            // benefit is lost if 'b' is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a + b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a * b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b <= a, errorMessage);\\n            return a - b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a / b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a % b;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x0f633a0223d9a1dcccfcf38a64c9de0874dfcbfac0c6941ccf074d63a2ce0e1e\",\"license\":\"MIT\"},\"contracts/player/PlayerStats.sol\":{\"content\":\"// SPDX-License-Identifier: ISC\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/access/AccessControl.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/math/SafeMath.sol\\\";\\n\\n//https://thatsallgames.com/2019/02/05/the-anatomy-of-rpgs-part-1-stats/\\ncontract PlayerStats is AccessControl {\\n    using SafeMath for uint256;\\n\\n    event PlayerBattleStatsUpdated (\\n        address who,\\n        uint256 strengthIncrease,\\n        uint256 dexterityIncrease,\\n        uint256 defenceIncrease,\\n        uint256 constitutionIncrease\\n    );\\n\\n    event PlayerFarmingStatsUpdated (\\n        address who,\\n        uint256 degeneracyIncrease,\\n        uint256 chadaryIncrease,\\n        uint256 unrekableIncrease\\n    );\\n\\n    struct Stats {\\n        uint256 level;\\n        uint256 experience;\\n        uint256 baseHealth;\\n        uint256 currentHealth; // todo need to work out regeneration rate\\n        bool isPlayer;\\n        BattleStats battleStats;\\n        FarmingStats farmingStats;\\n    }\\n\\n    struct BattleStats {\\n        uint256 baseStrength; // attack\\n        uint256 baseDexterity; // speed\\n        uint256 baseDefence; // defence\\n        uint256 baseConstitution; // health\\n    }\\n\\n    struct FarmingStats {\\n        uint256 chadary; // Necessary for higher \\\"Legitimate\\\" jobs but you earn more in \\\"Degenerate\\\" jobs\\n        uint256 degeneracy; // Necessary for higher \\\"Degenerate\\\" jobs but you earn more in \\\"Criminal\\\" jobs\\n        uint256 unrekable; // Necessary for higher \\\"Criminal\\\" jobs but you earn more in \\\"Legitimate\\\" jobs\\n    }\\n\\n    mapping(address => Stats) playerStats;\\n    address public playerManager;\\n\\n    bytes32 public constant ADMIN = keccak256(\\\"ADMIN\\\");\\n    bytes32 public constant PLAYER_MANAGER = keccak256(\\\"PLAYER_MANAGER\\\");\\n\\n    constructor() {\\n        _setupRole(ADMIN, msg.sender);\\n        _setRoleAdmin(PLAYER_MANAGER, ADMIN);\\n    }\\n\\n    function setPlayerManager(address _playerManager) public onlyAdmin {\\n        grantRole(PLAYER_MANAGER, _playerManager);\\n    }\\n\\n    function createBasePlayer(address _who) public onlyNewPlayer(_who) onlyPlayerManager {\\n        uint256 defaultBattleStats = 20 * 1 ether;\\n\\n        BattleStats memory battleStats = BattleStats({\\n        baseStrength : defaultBattleStats,\\n        baseDexterity : defaultBattleStats,\\n        baseDefence : defaultBattleStats,\\n        baseConstitution : defaultBattleStats\\n        });\\n\\n        FarmingStats memory farmingStats = FarmingStats({degeneracy : 0, chadary : 0, unrekable : 0});\\n\\n        playerStats[_who] = Stats({\\n        level : 1,\\n        experience : 0,\\n        baseHealth : 100,\\n        currentHealth : 100,\\n        battleStats : battleStats,\\n        farmingStats : farmingStats,\\n        isPlayer : true\\n        });\\n    }\\n\\n    function getPlayerStats(address _who)\\n    public\\n    view\\n    returns (\\n        uint256 level,\\n        uint256 experience,\\n        uint256 baseHealth,\\n        uint256 currentHealth,\\n        bool isPlayer\\n    )\\n    {\\n        Stats memory stats = playerStats[_who];\\n        return (stats.level, stats.experience, stats.baseHealth, stats.currentHealth, stats.isPlayer);\\n    }\\n\\n    function getPlayerBattleStats(address _who)\\n    public\\n    view\\n    returns (\\n        uint256 baseStrength,\\n        uint256 baseDexterity,\\n        uint256 baseDefence,\\n        uint256 baseConstitution\\n    )\\n    {\\n        BattleStats memory stats = playerStats[_who].battleStats;\\n\\n        return (stats.baseStrength, stats.baseDexterity, stats.baseDefence, stats.baseConstitution);\\n    }\\n\\n    function getPlayerFarmingStats(address _who)\\n    public\\n    view\\n    returns (\\n        uint256 _degeneracy,\\n        uint256 _chadary,\\n        uint256 _unrekable\\n    )\\n    {\\n        FarmingStats memory stats = playerStats[_who].farmingStats;\\n\\n        return (stats.degeneracy, stats.chadary, stats.unrekable);\\n    }\\n\\n    function increaseFarmingStats(\\n        address _who,\\n        uint256 _chadary,\\n        uint256 _degeneracy,\\n        uint256 _unrekable\\n    ) public onlyPlayerManager existingPlayer(_who) {\\n        emit PlayerFarmingStatsUpdated(_who, _chadary, _degeneracy, _unrekable);\\n\\n        playerStats[_who].farmingStats.chadary = playerStats[_who].farmingStats.chadary.add(_chadary);\\n        playerStats[_who].farmingStats.degeneracy = playerStats[_who].farmingStats.degeneracy.add(_degeneracy);\\n        playerStats[_who].farmingStats.unrekable = playerStats[_who].farmingStats.unrekable.add(_unrekable);\\n    }\\n\\n    function increaseBattleStats(\\n        address _who,\\n        uint256 _strength,\\n        uint256 _dexterity,\\n        uint256 _defence,\\n        uint256 _constitution\\n    ) public onlyPlayerManager existingPlayer(_who) {\\n        emit PlayerBattleStatsUpdated(_who, _strength, _dexterity, _defence, _constitution);\\n\\n        playerStats[_who].battleStats.baseStrength = playerStats[_who].battleStats.baseStrength.add(_strength);\\n        playerStats[_who].battleStats.baseDexterity = playerStats[_who].battleStats.baseDexterity.add(_dexterity);\\n        playerStats[_who].battleStats.baseDefence = playerStats[_who].battleStats.baseDefence.add(_defence);\\n        playerStats[_who].battleStats.baseConstitution = playerStats[_who].battleStats.baseConstitution.add(\\n            _constitution\\n        );\\n    }\\n\\n    modifier onlyNewPlayer(address _who) {\\n        require(playerStats[_who].isPlayer == false, \\\"Player already exists\\\");\\n        _;\\n    }\\n\\n    modifier existingPlayer(address _who) {\\n        require(playerStats[_who].isPlayer, \\\"Player doesn't exist\\\");\\n        _;\\n    }\\n\\n    modifier onlyPlayerManager() {\\n        require(hasRole(PLAYER_MANAGER, msg.sender), \\\"Not Player Manager\\\");\\n        _;\\n    }\\n\\n    modifier onlyAdmin() {\\n        require(hasRole(ADMIN, msg.sender), \\\"Not Admin\\\");\\n        _;\\n    }\\n}\\n\",\"keccak256\":\"0x526cb75c6a532a70a83b86839cfe12be599a6ccb731882387dd8ee73fe6cb02e\",\"license\":\"ISC\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b5061002960008051602061128283398151915233610066565b6100617fbea3dc2cfb254f821d5674bb49272a241e44cf76c754fddc24aa28318f0800a0600080516020611282833981519152610074565b61015d565b61007082826100bf565b5050565b600082815260208190526040808220600101805490849055905190918391839186917fbd79b86ffe0ab8e8776151514217cd7cacd52c909f66475c3af44e129f0b00ff9190a4505050565b6000828152602081815260408083206001600160a01b038516845290915290205460ff16610070576000828152602081815260408083206001600160a01b03851684529091529020805460ff191660011790556101193390565b6001600160a01b0316816001600160a01b0316837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45050565b6111168061016c6000396000f3fe608060405234801561001057600080fd5b506004361061010b5760003560e01c80634fd66eae116100a2578063a4b4eba511610071578063a4b4eba51461033b578063ab53bf011461034e578063d547741f146103d2578063e450458b146103e5578063ee06402c146103f857600080fd5b80634fd66eae146101f357806391d14854146102f55780639cdac8b814610308578063a217fddf1461033357600080fd5b80632f2ff15d116100de5780632f2ff15d146101a557806336568abe146101b8578063430eaf91146101cb5780634ae76f78146101e057600080fd5b806301ffc9a71461011057806306d10ad414610138578063248a9ca31461014d5780632a0acc6a1461017e575b600080fd5b61012361011e366004610e0b565b610469565b60405190151581526020015b60405180910390f35b61014b610146366004610e51565b6104a0565b005b61017061015b366004610e6c565b60009081526020819052604090206001015490565b60405190815260200161012f565b6101707fdf8b4c520ffe197c5343c6f5aec59570151ef9a492f2c624fd45ddde6135ec4281565b61014b6101b3366004610e85565b610522565b61014b6101c6366004610e85565b61054c565b6101706000805160206110c183398151915281565b61014b6101ee366004610eb1565b6105ca565b6102cb610201366004610e51565b6001600160a01b0316600090815260016020818152604092839020835160e0810185528154815292810154838301908152600282015484860190815260038301546060808701918252600485015460ff161515608080890191825289519081018a52600587015481526006870154818901526007870154818b015260088701548184015260a08901528851918201895260098601548252600a86015496820196909652600b909401549684019690965260c085019290925292519251905193519151929490939290565b6040805195865260208601949094529284019190915260608301521515608082015260a00161012f565b610123610303366004610e85565b610791565b60025461031b906001600160a01b031681565b6040516001600160a01b03909116815260200161012f565b610170600081565b61014b610349366004610ef3565b6107ba565b6103b261035c366004610e51565b6001600160a01b0316600090815260016020908152604091829020825160808101845260058201548082526006830154938201849052600783015494820185905260089092015460609091018190529093919291565b60408051948552602085019390935291830152606082015260800161012f565b61014b6103e0366004610e85565b61094b565b61014b6103f3366004610e51565b610970565b61044e610406366004610e51565b6001600160a01b031660009081526001602090815260409182902082516060810184526009820154808252600a830154938201849052600b9092015493018390529092909190565b6040805193845260208401929092529082015260600161012f565b60006001600160e01b03198216637965db0b60e01b148061049a57506301ffc9a760e01b6001600160e01b03198316145b92915050565b6104ca7fdf8b4c520ffe197c5343c6f5aec59570151ef9a492f2c624fd45ddde6135ec4233610791565b6105075760405162461bcd60e51b81526020600482015260096024820152682737ba1020b236b4b760b91b60448201526064015b60405180910390fd5b61051f6000805160206110c183398151915282610522565b50565b60008281526020819052604090206001015461053d81610b05565b6105478383610b0f565b505050565b6001600160a01b03811633146105bc5760405162461bcd60e51b815260206004820152602f60248201527f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636560448201526e103937b632b9903337b91039b2b63360891b60648201526084016104fe565b6105c68282610b93565b5050565b6105e26000805160206110c183398151915233610791565b6105fe5760405162461bcd60e51b81526004016104fe90610f2c565b6001600160a01b038516600090815260016020526040902060040154859060ff166106625760405162461bcd60e51b8152602060048201526014602482015273141b185e595c88191bd95cdb89dd08195e1a5cdd60621b60448201526064016104fe565b604080516001600160a01b03881681526020810187905290810185905260608101849052608081018390527fda4b4e006229be2448ea9cc62c4bd49ad1269e0b3c1f455e06a153728fb1351f9060a00160405180910390a16001600160a01b0386166000908152600160205260409020600501546106e09086610bf8565b6001600160a01b038716600090815260016020526040902060058101919091556006015461070e9085610bf8565b6001600160a01b038716600090815260016020526040902060068101919091556007015461073c9084610bf8565b6001600160a01b038716600090815260016020526040902060078101919091556008015461076a9083610bf8565b6001600160a01b039096166000908152600160205260409020600801959095555050505050565b6000918252602082815260408084206001600160a01b0393909316845291905290205460ff1690565b6107d26000805160206110c183398151915233610791565b6107ee5760405162461bcd60e51b81526004016104fe90610f2c565b6001600160a01b038416600090815260016020526040902060040154849060ff166108525760405162461bcd60e51b8152602060048201526014602482015273141b185e595c88191bd95cdb89dd08195e1a5cdd60621b60448201526064016104fe565b604080516001600160a01b038716815260208101869052908101849052606081018390527fc083fe3d02e9abad439ee915770da2cf55604bf7186d581657d46eadb84918689060800160405180910390a16001600160a01b0385166000908152600160205260409020600901546108c99085610bf8565b6001600160a01b03861660009081526001602052604090206009810191909155600a01546108f79084610bf8565b6001600160a01b0386166000908152600160205260409020600a810191909155600b01546109259083610bf8565b6001600160a01b039095166000908152600160205260409020600b019490945550505050565b60008281526020819052604090206001015461096681610b05565b6105478383610b93565b6001600160a01b038116600090815260016020526040902060040154819060ff16156109d65760405162461bcd60e51b8152602060048201526015602482015274506c6179657220616c72656164792065786973747360581b60448201526064016104fe565b6109ee6000805160206110c183398151915233610791565b610a0a5760405162461bcd60e51b81526004016104fe90610f2c565b5060408051608080820183526801158e460913d000008083526020808401829052838501829052606080850192909252845180830186526000808252818301819052818701819052865160e08101885260018082528185018381526064838b0181815284890191825298840183815260a085019a8b5260c085019687526001600160a01b039c909c168552828752938a902092518355519082015594516002860155516003850155955160048401805460ff19169115159190911790559251805160058401558084015160068401558085015160078401550151600882015592518051600985015590810151600a8401550151600b90910155565b61051f8133610c0b565b610b198282610791565b6105c6576000828152602081815260408083206001600160a01b03851684529091529020805460ff19166001179055610b4f3390565b6001600160a01b0316816001600160a01b0316837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45050565b610b9d8282610791565b156105c6576000828152602081815260408083206001600160a01b0385168085529252808320805460ff1916905551339285917ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b9190a45050565b6000610c048284610f6e565b9392505050565b610c158282610791565b6105c657610c2d816001600160a01b03166014610c6f565b610c38836020610c6f565b604051602001610c49929190610fb6565b60408051601f198184030181529082905262461bcd60e51b82526104fe9160040161102b565b60606000610c7e83600261105e565b610c89906002610f6e565b67ffffffffffffffff811115610ca157610ca161107d565b6040519080825280601f01601f191660200182016040528015610ccb576020820181803683370190505b509050600360fc1b81600081518110610ce657610ce6611093565b60200101906001600160f81b031916908160001a905350600f60fb1b81600181518110610d1557610d15611093565b60200101906001600160f81b031916908160001a9053506000610d3984600261105e565b610d44906001610f6e565b90505b6001811115610dbc576f181899199a1a9b1b9c1cb0b131b232b360811b85600f1660108110610d7857610d78611093565b1a60f81b828281518110610d8e57610d8e611093565b60200101906001600160f81b031916908160001a90535060049490941c93610db5816110a9565b9050610d47565b508315610c045760405162461bcd60e51b815260206004820181905260248201527f537472696e67733a20686578206c656e67746820696e73756666696369656e7460448201526064016104fe565b600060208284031215610e1d57600080fd5b81356001600160e01b031981168114610c0457600080fd5b80356001600160a01b0381168114610e4c57600080fd5b919050565b600060208284031215610e6357600080fd5b610c0482610e35565b600060208284031215610e7e57600080fd5b5035919050565b60008060408385031215610e9857600080fd5b82359150610ea860208401610e35565b90509250929050565b600080600080600060a08688031215610ec957600080fd5b610ed286610e35565b97602087013597506040870135966060810135965060800135945092505050565b60008060008060808587031215610f0957600080fd5b610f1285610e35565b966020860135965060408601359560600135945092505050565b6020808252601290820152712737ba10283630bcb2b91026b0b730b3b2b960711b604082015260600190565b634e487b7160e01b600052601160045260246000fd5b60008219821115610f8157610f81610f58565b500190565b60005b83811015610fa1578181015183820152602001610f89565b83811115610fb0576000848401525b50505050565b7f416363657373436f6e74726f6c3a206163636f756e7420000000000000000000815260008351610fee816017850160208801610f86565b7001034b99036b4b9b9b4b733903937b6329607d1b601791840191820152835161101f816028840160208801610f86565b01602801949350505050565b602081526000825180602084015261104a816040850160208701610f86565b601f01601f19169190910160400192915050565b600081600019048311821515161561107857611078610f58565b500290565b634e487b7160e01b600052604160045260246000fd5b634e487b7160e01b600052603260045260246000fd5b6000816110b8576110b8610f58565b50600019019056febea3dc2cfb254f821d5674bb49272a241e44cf76c754fddc24aa28318f0800a0a26469706673582212207aceadd7750a86996da32b16836038f8c1c19008fa5b9be71f1733be80779bd164736f6c63430008090033df8b4c520ffe197c5343c6f5aec59570151ef9a492f2c624fd45ddde6135ec42",
  "deployedBytecode": "0x608060405234801561001057600080fd5b506004361061010b5760003560e01c80634fd66eae116100a2578063a4b4eba511610071578063a4b4eba51461033b578063ab53bf011461034e578063d547741f146103d2578063e450458b146103e5578063ee06402c146103f857600080fd5b80634fd66eae146101f357806391d14854146102f55780639cdac8b814610308578063a217fddf1461033357600080fd5b80632f2ff15d116100de5780632f2ff15d146101a557806336568abe146101b8578063430eaf91146101cb5780634ae76f78146101e057600080fd5b806301ffc9a71461011057806306d10ad414610138578063248a9ca31461014d5780632a0acc6a1461017e575b600080fd5b61012361011e366004610e0b565b610469565b60405190151581526020015b60405180910390f35b61014b610146366004610e51565b6104a0565b005b61017061015b366004610e6c565b60009081526020819052604090206001015490565b60405190815260200161012f565b6101707fdf8b4c520ffe197c5343c6f5aec59570151ef9a492f2c624fd45ddde6135ec4281565b61014b6101b3366004610e85565b610522565b61014b6101c6366004610e85565b61054c565b6101706000805160206110c183398151915281565b61014b6101ee366004610eb1565b6105ca565b6102cb610201366004610e51565b6001600160a01b0316600090815260016020818152604092839020835160e0810185528154815292810154838301908152600282015484860190815260038301546060808701918252600485015460ff161515608080890191825289519081018a52600587015481526006870154818901526007870154818b015260088701548184015260a08901528851918201895260098601548252600a86015496820196909652600b909401549684019690965260c085019290925292519251905193519151929490939290565b6040805195865260208601949094529284019190915260608301521515608082015260a00161012f565b610123610303366004610e85565b610791565b60025461031b906001600160a01b031681565b6040516001600160a01b03909116815260200161012f565b610170600081565b61014b610349366004610ef3565b6107ba565b6103b261035c366004610e51565b6001600160a01b0316600090815260016020908152604091829020825160808101845260058201548082526006830154938201849052600783015494820185905260089092015460609091018190529093919291565b60408051948552602085019390935291830152606082015260800161012f565b61014b6103e0366004610e85565b61094b565b61014b6103f3366004610e51565b610970565b61044e610406366004610e51565b6001600160a01b031660009081526001602090815260409182902082516060810184526009820154808252600a830154938201849052600b9092015493018390529092909190565b6040805193845260208401929092529082015260600161012f565b60006001600160e01b03198216637965db0b60e01b148061049a57506301ffc9a760e01b6001600160e01b03198316145b92915050565b6104ca7fdf8b4c520ffe197c5343c6f5aec59570151ef9a492f2c624fd45ddde6135ec4233610791565b6105075760405162461bcd60e51b81526020600482015260096024820152682737ba1020b236b4b760b91b60448201526064015b60405180910390fd5b61051f6000805160206110c183398151915282610522565b50565b60008281526020819052604090206001015461053d81610b05565b6105478383610b0f565b505050565b6001600160a01b03811633146105bc5760405162461bcd60e51b815260206004820152602f60248201527f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636560448201526e103937b632b9903337b91039b2b63360891b60648201526084016104fe565b6105c68282610b93565b5050565b6105e26000805160206110c183398151915233610791565b6105fe5760405162461bcd60e51b81526004016104fe90610f2c565b6001600160a01b038516600090815260016020526040902060040154859060ff166106625760405162461bcd60e51b8152602060048201526014602482015273141b185e595c88191bd95cdb89dd08195e1a5cdd60621b60448201526064016104fe565b604080516001600160a01b03881681526020810187905290810185905260608101849052608081018390527fda4b4e006229be2448ea9cc62c4bd49ad1269e0b3c1f455e06a153728fb1351f9060a00160405180910390a16001600160a01b0386166000908152600160205260409020600501546106e09086610bf8565b6001600160a01b038716600090815260016020526040902060058101919091556006015461070e9085610bf8565b6001600160a01b038716600090815260016020526040902060068101919091556007015461073c9084610bf8565b6001600160a01b038716600090815260016020526040902060078101919091556008015461076a9083610bf8565b6001600160a01b039096166000908152600160205260409020600801959095555050505050565b6000918252602082815260408084206001600160a01b0393909316845291905290205460ff1690565b6107d26000805160206110c183398151915233610791565b6107ee5760405162461bcd60e51b81526004016104fe90610f2c565b6001600160a01b038416600090815260016020526040902060040154849060ff166108525760405162461bcd60e51b8152602060048201526014602482015273141b185e595c88191bd95cdb89dd08195e1a5cdd60621b60448201526064016104fe565b604080516001600160a01b038716815260208101869052908101849052606081018390527fc083fe3d02e9abad439ee915770da2cf55604bf7186d581657d46eadb84918689060800160405180910390a16001600160a01b0385166000908152600160205260409020600901546108c99085610bf8565b6001600160a01b03861660009081526001602052604090206009810191909155600a01546108f79084610bf8565b6001600160a01b0386166000908152600160205260409020600a810191909155600b01546109259083610bf8565b6001600160a01b039095166000908152600160205260409020600b019490945550505050565b60008281526020819052604090206001015461096681610b05565b6105478383610b93565b6001600160a01b038116600090815260016020526040902060040154819060ff16156109d65760405162461bcd60e51b8152602060048201526015602482015274506c6179657220616c72656164792065786973747360581b60448201526064016104fe565b6109ee6000805160206110c183398151915233610791565b610a0a5760405162461bcd60e51b81526004016104fe90610f2c565b5060408051608080820183526801158e460913d000008083526020808401829052838501829052606080850192909252845180830186526000808252818301819052818701819052865160e08101885260018082528185018381526064838b0181815284890191825298840183815260a085019a8b5260c085019687526001600160a01b039c909c168552828752938a902092518355519082015594516002860155516003850155955160048401805460ff19169115159190911790559251805160058401558084015160068401558085015160078401550151600882015592518051600985015590810151600a8401550151600b90910155565b61051f8133610c0b565b610b198282610791565b6105c6576000828152602081815260408083206001600160a01b03851684529091529020805460ff19166001179055610b4f3390565b6001600160a01b0316816001600160a01b0316837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45050565b610b9d8282610791565b156105c6576000828152602081815260408083206001600160a01b0385168085529252808320805460ff1916905551339285917ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b9190a45050565b6000610c048284610f6e565b9392505050565b610c158282610791565b6105c657610c2d816001600160a01b03166014610c6f565b610c38836020610c6f565b604051602001610c49929190610fb6565b60408051601f198184030181529082905262461bcd60e51b82526104fe9160040161102b565b60606000610c7e83600261105e565b610c89906002610f6e565b67ffffffffffffffff811115610ca157610ca161107d565b6040519080825280601f01601f191660200182016040528015610ccb576020820181803683370190505b509050600360fc1b81600081518110610ce657610ce6611093565b60200101906001600160f81b031916908160001a905350600f60fb1b81600181518110610d1557610d15611093565b60200101906001600160f81b031916908160001a9053506000610d3984600261105e565b610d44906001610f6e565b90505b6001811115610dbc576f181899199a1a9b1b9c1cb0b131b232b360811b85600f1660108110610d7857610d78611093565b1a60f81b828281518110610d8e57610d8e611093565b60200101906001600160f81b031916908160001a90535060049490941c93610db5816110a9565b9050610d47565b508315610c045760405162461bcd60e51b815260206004820181905260248201527f537472696e67733a20686578206c656e67746820696e73756666696369656e7460448201526064016104fe565b600060208284031215610e1d57600080fd5b81356001600160e01b031981168114610c0457600080fd5b80356001600160a01b0381168114610e4c57600080fd5b919050565b600060208284031215610e6357600080fd5b610c0482610e35565b600060208284031215610e7e57600080fd5b5035919050565b60008060408385031215610e9857600080fd5b82359150610ea860208401610e35565b90509250929050565b600080600080600060a08688031215610ec957600080fd5b610ed286610e35565b97602087013597506040870135966060810135965060800135945092505050565b60008060008060808587031215610f0957600080fd5b610f1285610e35565b966020860135965060408601359560600135945092505050565b6020808252601290820152712737ba10283630bcb2b91026b0b730b3b2b960711b604082015260600190565b634e487b7160e01b600052601160045260246000fd5b60008219821115610f8157610f81610f58565b500190565b60005b83811015610fa1578181015183820152602001610f89565b83811115610fb0576000848401525b50505050565b7f416363657373436f6e74726f6c3a206163636f756e7420000000000000000000815260008351610fee816017850160208801610f86565b7001034b99036b4b9b9b4b733903937b6329607d1b601791840191820152835161101f816028840160208801610f86565b01602801949350505050565b602081526000825180602084015261104a816040850160208701610f86565b601f01601f19169190910160400192915050565b600081600019048311821515161561107857611078610f58565b500290565b634e487b7160e01b600052604160045260246000fd5b634e487b7160e01b600052603260045260246000fd5b6000816110b8576110b8610f58565b50600019019056febea3dc2cfb254f821d5674bb49272a241e44cf76c754fddc24aa28318f0800a0a26469706673582212207aceadd7750a86996da32b16836038f8c1c19008fa5b9be71f1733be80779bd164736f6c63430008090033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "getRoleAdmin(bytes32)": {
        "details": "Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}."
      },
      "grantRole(bytes32,address)": {
        "details": "Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role."
      },
      "hasRole(bytes32,address)": {
        "details": "Returns `true` if `account` has been granted `role`."
      },
      "renounceRole(bytes32,address)": {
        "details": "Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`."
      },
      "revokeRole(bytes32,address)": {
        "details": "Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role."
      },
      "supportsInterface(bytes4)": {
        "details": "See {IERC165-supportsInterface}."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 24,
        "contract": "contracts/player/PlayerStats.sol:PlayerStats",
        "label": "_roles",
        "offset": 0,
        "slot": "0",
        "type": "t_mapping(t_bytes32,t_struct(RoleData)19_storage)"
      },
      {
        "astId": 4475,
        "contract": "contracts/player/PlayerStats.sol:PlayerStats",
        "label": "playerStats",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_address,t_struct(Stats)4454_storage)"
      },
      {
        "astId": 4477,
        "contract": "contracts/player/PlayerStats.sol:PlayerStats",
        "label": "playerManager",
        "offset": 0,
        "slot": "2",
        "type": "t_address"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_struct(Stats)4454_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct PlayerStats.Stats)",
        "numberOfBytes": "32",
        "value": "t_struct(Stats)4454_storage"
      },
      "t_mapping(t_bytes32,t_struct(RoleData)19_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => struct AccessControl.RoleData)",
        "numberOfBytes": "32",
        "value": "t_struct(RoleData)19_storage"
      },
      "t_struct(BattleStats)4463_storage": {
        "encoding": "inplace",
        "label": "struct PlayerStats.BattleStats",
        "members": [
          {
            "astId": 4456,
            "contract": "contracts/player/PlayerStats.sol:PlayerStats",
            "label": "baseStrength",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 4458,
            "contract": "contracts/player/PlayerStats.sol:PlayerStats",
            "label": "baseDexterity",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 4460,
            "contract": "contracts/player/PlayerStats.sol:PlayerStats",
            "label": "baseDefence",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 4462,
            "contract": "contracts/player/PlayerStats.sol:PlayerStats",
            "label": "baseConstitution",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "128"
      },
      "t_struct(FarmingStats)4470_storage": {
        "encoding": "inplace",
        "label": "struct PlayerStats.FarmingStats",
        "members": [
          {
            "astId": 4465,
            "contract": "contracts/player/PlayerStats.sol:PlayerStats",
            "label": "chadary",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 4467,
            "contract": "contracts/player/PlayerStats.sol:PlayerStats",
            "label": "degeneracy",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 4469,
            "contract": "contracts/player/PlayerStats.sol:PlayerStats",
            "label": "unrekable",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "96"
      },
      "t_struct(RoleData)19_storage": {
        "encoding": "inplace",
        "label": "struct AccessControl.RoleData",
        "members": [
          {
            "astId": 16,
            "contract": "contracts/player/PlayerStats.sol:PlayerStats",
            "label": "members",
            "offset": 0,
            "slot": "0",
            "type": "t_mapping(t_address,t_bool)"
          },
          {
            "astId": 18,
            "contract": "contracts/player/PlayerStats.sol:PlayerStats",
            "label": "adminRole",
            "offset": 0,
            "slot": "1",
            "type": "t_bytes32"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(Stats)4454_storage": {
        "encoding": "inplace",
        "label": "struct PlayerStats.Stats",
        "members": [
          {
            "astId": 4439,
            "contract": "contracts/player/PlayerStats.sol:PlayerStats",
            "label": "level",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 4441,
            "contract": "contracts/player/PlayerStats.sol:PlayerStats",
            "label": "experience",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 4443,
            "contract": "contracts/player/PlayerStats.sol:PlayerStats",
            "label": "baseHealth",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 4445,
            "contract": "contracts/player/PlayerStats.sol:PlayerStats",
            "label": "currentHealth",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          },
          {
            "astId": 4447,
            "contract": "contracts/player/PlayerStats.sol:PlayerStats",
            "label": "isPlayer",
            "offset": 0,
            "slot": "4",
            "type": "t_bool"
          },
          {
            "astId": 4450,
            "contract": "contracts/player/PlayerStats.sol:PlayerStats",
            "label": "battleStats",
            "offset": 0,
            "slot": "5",
            "type": "t_struct(BattleStats)4463_storage"
          },
          {
            "astId": 4453,
            "contract": "contracts/player/PlayerStats.sol:PlayerStats",
            "label": "farmingStats",
            "offset": 0,
            "slot": "9",
            "type": "t_struct(FarmingStats)4470_storage"
          }
        ],
        "numberOfBytes": "384"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}