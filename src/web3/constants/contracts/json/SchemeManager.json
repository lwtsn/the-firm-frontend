{
  "address": "0xDc64a140Aa3E981100a9becA4E685f962f0cF6C9",
  "abi": [
    {
      "inputs": [],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "schemeAddress",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "when",
          "type": "uint256"
        }
      ],
      "name": "SchemeAdded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "schemeAddress",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "who",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "when",
          "type": "uint256"
        }
      ],
      "name": "SchemeStarted",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_schemeAddress",
          "type": "address"
        }
      ],
      "name": "addScheme",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "completeScheme",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_who",
          "type": "address"
        }
      ],
      "name": "getOngoingScheme",
      "outputs": [
        {
          "internalType": "bool",
          "name": "_isOngoing",
          "type": "bool"
        },
        {
          "internalType": "uint256",
          "name": "_schemeId",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_schemeAddress",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_timeStarted",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_timeCompleting",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "listSchemes",
      "outputs": [
        {
          "internalType": "bool[]",
          "name": "_schemes",
          "type": "bool[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "nextSchemeId",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "schemes",
      "outputs": [
        {
          "internalType": "address",
          "name": "schemeAddress",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "isScheme",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "skipScheme",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_schemeId",
          "type": "uint256"
        }
      ],
      "name": "startScheme",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x180f7d0f0a2d4fb2726a2547aacecfe09cc67a21e80fe3c92f6b8c925936bd43",
  "receipt": {
    "to": null,
    "from": "0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266",
    "contractAddress": "0xDc64a140Aa3E981100a9becA4E685f962f0cF6C9",
    "transactionIndex": 0,
    "gasUsed": "608008",
    "logsBloom": "0x
    "blockHash": "0xbe03bfc029ccf4e9a4ff5a7b5482209691535c12c4940ce349eee4db95910955",
    "transactionHash": "0x180f7d0f0a2d4fb2726a2547aacecfe09cc67a21e80fe3c92f6b8c925936bd43",
    "logs": [],
    "blockNumber": 11557972,
    "cumulativeGasUsed": "608008",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "solcInputHash": "8f1eaf940c377f820c07e3c6dbeebcfa",
  "metadata": "{\"compiler\":{\"version\":\"0.6.8+commit.0bbfe453\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"schemeAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"when\",\"type\":\"uint256\"}],\"name\":\"SchemeAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"schemeAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"who\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"when\",\"type\":\"uint256\"}],\"name\":\"SchemeStarted\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_schemeAddress\",\"type\":\"address\"}],\"name\":\"addScheme\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"completeScheme\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_who\",\"type\":\"address\"}],\"name\":\"getOngoingScheme\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"_isOngoing\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"_schemeId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_schemeAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_timeStarted\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_timeCompleting\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"listSchemes\",\"outputs\":[{\"internalType\":\"bool[]\",\"name\":\"_schemes\",\"type\":\"bool[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nextSchemeId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"schemes\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"schemeAddress\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"isScheme\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"skipScheme\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_schemeId\",\"type\":\"uint256\"}],\"name\":\"startScheme\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"methods\":{}},\"userdoc\":{\"methods\":{}}},\"settings\":{\"compilationTarget\":{\"contracts/schemes/SchemeManager.sol\":\"SchemeManager\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/GSN/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with GSN meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address payable) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes memory) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0x8d3cb350f04ff49cfb10aef08d87f19dcbaecc8027b0bed12f3275cd12f38cf0\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/AccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"../utils/EnumerableSet.sol\\\";\\nimport \\\"../utils/Address.sol\\\";\\nimport \\\"../GSN/Context.sol\\\";\\n\\n/**\\n * @dev Contract module that allows children to implement role-based access\\n * control mechanisms.\\n *\\n * Roles are referred to by their `bytes32` identifier. These should be exposed\\n * in the external API and be unique. The best way to achieve this is by\\n * using `public constant` hash digests:\\n *\\n * ```\\n * bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\");\\n * ```\\n *\\n * Roles can be used to represent a set of permissions. To restrict access to a\\n * function call, use {hasRole}:\\n *\\n * ```\\n * function foo() public {\\n *     require(hasRole(MY_ROLE, msg.sender));\\n *     ...\\n * }\\n * ```\\n *\\n * Roles can be granted and revoked dynamically via the {grantRole} and\\n * {revokeRole} functions. Each role has an associated admin role, and only\\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\\n *\\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\\n * that only accounts with this role will be able to grant or revoke other\\n * roles. More complex role relationships can be created by using\\n * {_setRoleAdmin}.\\n *\\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\\n * grant and revoke this role. Extra precautions should be taken to secure\\n * accounts that have been granted it.\\n */\\nabstract contract AccessControl is Context {\\n    using EnumerableSet for EnumerableSet.AddressSet;\\n    using Address for address;\\n\\n    struct RoleData {\\n        EnumerableSet.AddressSet members;\\n        bytes32 adminRole;\\n    }\\n\\n    mapping (bytes32 => RoleData) private _roles;\\n\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     *\\n     * _Available since v3.1._\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) public view returns (bool) {\\n        return _roles[role].members.contains(account);\\n    }\\n\\n    /**\\n     * @dev Returns the number of accounts that have `role`. Can be used\\n     * together with {getRoleMember} to enumerate all bearers of a role.\\n     */\\n    function getRoleMemberCount(bytes32 role) public view returns (uint256) {\\n        return _roles[role].members.length();\\n    }\\n\\n    /**\\n     * @dev Returns one of the accounts that have `role`. `index` must be a\\n     * value between 0 and {getRoleMemberCount}, non-inclusive.\\n     *\\n     * Role bearers are not sorted in any particular way, and their ordering may\\n     * change at any point.\\n     *\\n     * WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure\\n     * you perform all queries on the same block. See the following\\n     * https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post]\\n     * for more information.\\n     */\\n    function getRoleMember(bytes32 role, uint256 index) public view returns (address) {\\n        return _roles[role].members.at(index);\\n    }\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) public view returns (bytes32) {\\n        return _roles[role].adminRole;\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) public virtual {\\n        require(hasRole(_roles[role].adminRole, _msgSender()), \\\"AccessControl: sender must be an admin to grant\\\");\\n\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) public virtual {\\n        require(hasRole(_roles[role].adminRole, _msgSender()), \\\"AccessControl: sender must be an admin to revoke\\\");\\n\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) public virtual {\\n        require(account == _msgSender(), \\\"AccessControl: can only renounce roles for self\\\");\\n\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event. Note that unlike {grantRole}, this function doesn't perform any\\n     * checks on the calling account.\\n     *\\n     * [WARNING]\\n     * ====\\n     * This function should only be called from the constructor when setting\\n     * up the initial roles for the system.\\n     *\\n     * Using this function in any other way is effectively circumventing the admin\\n     * system imposed by {AccessControl}.\\n     * ====\\n     */\\n    function _setupRole(bytes32 role, address account) internal virtual {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Sets `adminRole` as ``role``'s admin role.\\n     *\\n     * Emits a {RoleAdminChanged} event.\\n     */\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\\n        emit RoleAdminChanged(role, _roles[role].adminRole, adminRole);\\n        _roles[role].adminRole = adminRole;\\n    }\\n\\n    function _grantRole(bytes32 role, address account) private {\\n        if (_roles[role].members.add(account)) {\\n            emit RoleGranted(role, account, _msgSender());\\n        }\\n    }\\n\\n    function _revokeRole(bytes32 role, address account) private {\\n        if (_roles[role].members.remove(account)) {\\n            emit RoleRevoked(role, account, _msgSender());\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x37ff88aa5ca8f533e31b9e1cb5354816b15bb7d41c904ea1c8f5dd5a78d6da25\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"../GSN/Context.sol\\\";\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor () internal {\\n        address msgSender = _msgSender();\\n        _owner = msgSender;\\n        emit OwnershipTransferred(address(0), msgSender);\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(_owner == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        emit OwnershipTransferred(_owner, address(0));\\n        _owner = address(0);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        emit OwnershipTransferred(_owner, newOwner);\\n        _owner = newOwner;\\n    }\\n}\\n\",\"keccak256\":\"0xf7c39c7e6d06ed3bda90cfefbcbf2ddc32c599c3d6721746546ad64946efccaa\",\"license\":\"MIT\"},\"@openzeppelin/contracts/math/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return sub(a, b, \\\"SafeMath: subtraction overflow\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        uint256 c = a - b;\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return div(a, b, \\\"SafeMath: division by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        uint256 c = a / b;\\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return mod(a, b, \\\"SafeMath: modulo by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts with custom message when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b != 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\",\"keccak256\":\"0x3b21f2c8d626de3b9925ae33e972d8bf5c8b1bffb3f4ee94daeed7d0679036e6\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/ERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"../../GSN/Context.sol\\\";\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"../../math/SafeMath.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin guidelines: functions revert instead\\n * of returning `false` on failure. This behavior is nonetheless conventional\\n * and does not conflict with the expectations of ERC20 applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20 is Context, IERC20 {\\n    using SafeMath for uint256;\\n\\n    mapping (address => uint256) private _balances;\\n\\n    mapping (address => mapping (address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n    uint8 private _decimals;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}, initializes {decimals} with\\n     * a default value of 18.\\n     *\\n     * To select a different value for {decimals}, use {_setupDecimals}.\\n     *\\n     * All three of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor (string memory name_, string memory symbol_) public {\\n        _name = name_;\\n        _symbol = symbol_;\\n        _decimals = 18;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5,05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the value {ERC20} uses, unless {_setupDecimals} is\\n     * called.\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view returns (uint8) {\\n        return _decimals;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `recipient` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\\n        _transfer(_msgSender(), recipient, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        _approve(_msgSender(), spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` and `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``sender``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) public virtual override returns (bool) {\\n        _transfer(sender, recipient, amount);\\n        _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, \\\"ERC20: transfer amount exceeds allowance\\\"));\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, \\\"ERC20: decreased allowance below zero\\\"));\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves tokens `amount` from `sender` to `recipient`.\\n     *\\n     * This is internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` cannot be the zero address.\\n     * - `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     */\\n    function _transfer(address sender, address recipient, uint256 amount) internal virtual {\\n        require(sender != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(recipient != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(sender, recipient, amount);\\n\\n        _balances[sender] = _balances[sender].sub(amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        _balances[recipient] = _balances[recipient].add(amount);\\n        emit Transfer(sender, recipient, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply = _totalSupply.add(amount);\\n        _balances[account] = _balances[account].add(amount);\\n        emit Transfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        _balances[account] = _balances[account].sub(amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        _totalSupply = _totalSupply.sub(amount);\\n        emit Transfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(address owner, address spender, uint256 amount) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Sets {decimals} to a value other than the default one of 18.\\n     *\\n     * WARNING: This function should only be called from the constructor. Most\\n     * applications that interact with token contracts will not expect\\n     * {decimals} to ever change, and may work incorrectly if it does.\\n     */\\n    function _setupDecimals(uint8 decimals_) internal {\\n        _decimals = decimals_;\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be to transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual { }\\n}\\n\",\"keccak256\":\"0xcbd85c86627a47fd939f1f4ee3ba626575ff2a182e1804b29f5136394449b538\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x5f02220344881ce43204ae4a6281145a67bc52c2bb1290a791857df3d19d78f5\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.2 <0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { size := extcodesize(account) }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\n        (bool success, ) = recipient.call{ value: amount }(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain`call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n      return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xa6a15ddddcbf29d2922a1e0d4151b5d2d33da24b93cc9ebc12390e0d855532f8\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/EnumerableSet.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Library for managing\\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\\n * types.\\n *\\n * Sets have the following properties:\\n *\\n * - Elements are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n * ```\\n * contract Example {\\n *     // Add the library methods\\n *     using EnumerableSet for EnumerableSet.AddressSet;\\n *\\n *     // Declare a set state variable\\n *     EnumerableSet.AddressSet private mySet;\\n * }\\n * ```\\n *\\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\\n * and `uint256` (`UintSet`) are supported.\\n */\\nlibrary EnumerableSet {\\n    // To implement this library for multiple types with as little code\\n    // repetition as possible, we write it in terms of a generic Set type with\\n    // bytes32 values.\\n    // The Set implementation uses private functions, and user-facing\\n    // implementations (such as AddressSet) are just wrappers around the\\n    // underlying Set.\\n    // This means that we can only create new EnumerableSets for types that fit\\n    // in bytes32.\\n\\n    struct Set {\\n        // Storage of set values\\n        bytes32[] _values;\\n\\n        // Position of the value in the `values` array, plus 1 because index 0\\n        // means a value is not in the set.\\n        mapping (bytes32 => uint256) _indexes;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function _add(Set storage set, bytes32 value) private returns (bool) {\\n        if (!_contains(set, value)) {\\n            set._values.push(value);\\n            // The value is stored at length-1, but we add 1 to all indexes\\n            // and use 0 as a sentinel value\\n            set._indexes[value] = set._values.length;\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\\n        // We read and store the value's index to prevent multiple reads from the same storage slot\\n        uint256 valueIndex = set._indexes[value];\\n\\n        if (valueIndex != 0) { // Equivalent to contains(set, value)\\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\\n            // This modifies the order of the array, as noted in {at}.\\n\\n            uint256 toDeleteIndex = valueIndex - 1;\\n            uint256 lastIndex = set._values.length - 1;\\n\\n            // When the value to delete is the last one, the swap operation is unnecessary. However, since this occurs\\n            // so rarely, we still do the swap anyway to avoid the gas cost of adding an 'if' statement.\\n\\n            bytes32 lastvalue = set._values[lastIndex];\\n\\n            // Move the last value to the index where the value to delete is\\n            set._values[toDeleteIndex] = lastvalue;\\n            // Update the index for the moved value\\n            set._indexes[lastvalue] = toDeleteIndex + 1; // All indexes are 1-based\\n\\n            // Delete the slot where the moved value was stored\\n            set._values.pop();\\n\\n            // Delete the index for the deleted slot\\n            delete set._indexes[value];\\n\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\\n        return set._indexes[value] != 0;\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function _length(Set storage set) private view returns (uint256) {\\n        return set._values.length;\\n    }\\n\\n   /**\\n    * @dev Returns the value stored at position `index` in the set. O(1).\\n    *\\n    * Note that there are no guarantees on the ordering of values inside the\\n    * array, and it may change when more values are added or removed.\\n    *\\n    * Requirements:\\n    *\\n    * - `index` must be strictly less than {length}.\\n    */\\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\\n        require(set._values.length > index, \\\"EnumerableSet: index out of bounds\\\");\\n        return set._values[index];\\n    }\\n\\n    // Bytes32Set\\n\\n    struct Bytes32Set {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _add(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _remove(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\\n        return _contains(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(Bytes32Set storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n   /**\\n    * @dev Returns the value stored at position `index` in the set. O(1).\\n    *\\n    * Note that there are no guarantees on the ordering of values inside the\\n    * array, and it may change when more values are added or removed.\\n    *\\n    * Requirements:\\n    *\\n    * - `index` must be strictly less than {length}.\\n    */\\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\\n        return _at(set._inner, index);\\n    }\\n\\n    // AddressSet\\n\\n    struct AddressSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(AddressSet storage set, address value) internal returns (bool) {\\n        return _add(set._inner, bytes32(uint256(value)));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(AddressSet storage set, address value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(uint256(value)));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(uint256(value)));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(AddressSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n   /**\\n    * @dev Returns the value stored at position `index` in the set. O(1).\\n    *\\n    * Note that there are no guarantees on the ordering of values inside the\\n    * array, and it may change when more values are added or removed.\\n    *\\n    * Requirements:\\n    *\\n    * - `index` must be strictly less than {length}.\\n    */\\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\\n        return address(uint256(_at(set._inner, index)));\\n    }\\n\\n\\n    // UintSet\\n\\n    struct UintSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _add(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function length(UintSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n   /**\\n    * @dev Returns the value stored at position `index` in the set. O(1).\\n    *\\n    * Note that there are no guarantees on the ordering of values inside the\\n    * array, and it may change when more values are added or removed.\\n    *\\n    * Requirements:\\n    *\\n    * - `index` must be strictly less than {length}.\\n    */\\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\\n        return uint256(_at(set._inner, index));\\n    }\\n}\\n\",\"keccak256\":\"0xae0992eb1ec30fd1ecdf2e04a6036decfc9797bf11dc1ec84b546b74318d5ec2\",\"license\":\"MIT\"},\"contracts/Cash.sol\":{\"content\":\"pragma solidity ^0.6.0;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/AccessControl.sol\\\";\\n\\ncontract Cash is AccessControl, ERC20 {\\n    bytes32 public constant ADMIN = keccak256(\\\"ADMIN\\\");\\n    bytes32 public constant CASH_MINTER = keccak256(\\\"CASH_MINTER\\\");\\n\\n    constructor() public ERC20(\\\"CASH\\\", \\\"CA$H\\\") {\\n        _setupRole(ADMIN, msg.sender);\\n        _setRoleAdmin(CASH_MINTER, ADMIN);\\n    }\\n\\n    function mint(address _who, uint256 _amount) public onlyCashMinter {\\n        super._mint(_who, _amount);\\n    }\\n\\n    function burn(uint256 _amount) public {\\n        super._burn(msg.sender, _amount);\\n    }\\n\\n    function setCashMinter(address _who) public onlyAdmin {\\n        grantRole(CASH_MINTER, _who);\\n    }\\n\\n    modifier onlyAdmin() {\\n        require(hasRole(ADMIN, msg.sender), \\\"Not Admin\\\");\\n        _;\\n    }\\n\\n    modifier onlyCashMinter() {\\n        require(hasRole(CASH_MINTER, msg.sender), \\\"Not Cash Minter\\\");\\n        _;\\n    }\\n}\\n\",\"keccak256\":\"0xdce35654540e5e4cf01d1311fe7cc67ce34a996693a9444e77b26b2f8b8ceb61\"},\"contracts/player/Player.sol\":{\"content\":\"pragma solidity ^0.6.0;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/AccessControl.sol\\\";\\nimport \\\"@openzeppelin/contracts/math/SafeMath.sol\\\";\\n\\nimport \\\"./PlayerStats.sol\\\";\\n\\ncontract Player is AccessControl {\\n    using SafeMath for uint256;\\n\\n    event PlayerCreated(address _who, uint256 _when);\\n\\n    mapping(address => bool) private accounts;\\n\\n    address private playerStats;\\n\\n    bytes32 public constant ADMIN = keccak256(\\\"ADMIN\\\");\\n\\n    constructor() public {\\n        _setupRole(ADMIN, msg.sender);\\n    }\\n\\n    function setPlayerStatsAddress(address _playerStats) public onlyAdmin {\\n        playerStats = _playerStats;\\n    }\\n\\n    function create() public {\\n        require(isPlayer(msg.sender) == false, \\\"Account already exists\\\");\\n\\n        accounts[msg.sender] = true;\\n\\n        PlayerStats(playerStats).createBasePlayer(msg.sender);\\n\\n        emit PlayerCreated(msg.sender, block.timestamp);\\n    }\\n\\n    function isPlayer(address _who) public view returns (bool) {\\n        return accounts[_who];\\n    }\\n\\n    modifier onlyAdmin() {\\n        require(hasRole(ADMIN, msg.sender), \\\"Not Admin\\\");\\n        _;\\n    }\\n\\n    modifier hasAccount(address _who) {\\n        require(isPlayer(_who), \\\"Account does not exist\\\");\\n        _;\\n    }\\n}\\n\",\"keccak256\":\"0xc4da5d0d110919bedde2ae949c8531f63e29004be06da17544e4e5b8592a43fd\"},\"contracts/player/PlayerStats.sol\":{\"content\":\"pragma solidity ^0.6.0;\\n\\nimport \\\"@openzeppelin/contracts/access/AccessControl.sol\\\";\\nimport \\\"@openzeppelin/contracts/math/SafeMath.sol\\\";\\n\\n//https://thatsallgames.com/2019/02/05/the-anatomy-of-rpgs-part-1-stats/\\ncontract PlayerStats is AccessControl {\\n    using SafeMath for uint256;\\n\\n    event PlayerBattleStatsUpdated (\\n        address who,\\n        uint256 strengthIncrease,\\n        uint256 dexterityIncrease,\\n        uint256 defenceIncrease,\\n        uint256 constitutionIncrease\\n    );\\n\\n    event PlayerFarmingStatsUpdated (\\n        address who,\\n        uint256 degeneracyIncrease,\\n        uint256 chadaryIncrease,\\n        uint256 fomostitionIncrease,\\n        uint256 rugpullableIncrease\\n    );\\n\\n    struct Stats {\\n        uint256 level;\\n        uint256 experience;\\n        uint256 baseHealth;\\n        uint256 currentHealth; // todo need to work out regeneration rate\\n        bool isPlayer;\\n        BattleStats battleStats;\\n        FarmingStats farmingStats;\\n    }\\n\\n    struct BattleStats {\\n        uint256 baseStrength; // attack\\n        uint256 baseDexterity; // speed\\n        uint256 baseDefence; // defence\\n        uint256 baseConstitution; // health\\n    }\\n\\n    struct FarmingStats {\\n        uint256 degeneracy; // Higher gains\\n        uint256 chadary; // Chance to succeed\\n        uint256 fomostition; // Higher losses\\n        uint256 rugpullable; // Chance to fail\\n    }\\n\\n    mapping(address => Stats) playerStats;\\n    address public playerManager;\\n\\n    bytes32 public constant ADMIN = keccak256(\\\"ADMIN\\\");\\n    bytes32 public constant PLAYER_MANAGER = keccak256(\\\"PLAYER_MANAGER\\\");\\n\\n    constructor() public {\\n        _setupRole(ADMIN, msg.sender);\\n        _setRoleAdmin(PLAYER_MANAGER, ADMIN);\\n    }\\n\\n    function setPlayerManager(address _playerManager) public onlyAdmin {\\n        grantRole(PLAYER_MANAGER, _playerManager);\\n    }\\n\\n    function createBasePlayer(address _who) public onlyNewPlayer(_who) onlyPlayerManager {\\n        uint256 defaultBattleStats = 20 * 1 ether;\\n\\n        BattleStats memory battleStats = BattleStats({\\n        baseStrength : defaultBattleStats,\\n        baseDexterity : defaultBattleStats,\\n        baseDefence : defaultBattleStats,\\n        baseConstitution : defaultBattleStats\\n        });\\n\\n        FarmingStats memory farmingStats = FarmingStats({degeneracy : 0, chadary : 0, fomostition : 0, rugpullable : 0});\\n\\n        playerStats[_who] = Stats({\\n        level : 1,\\n        experience : 0,\\n        baseHealth : 100,\\n        currentHealth : 100,\\n        battleStats : battleStats,\\n        farmingStats : farmingStats,\\n        isPlayer : true\\n        });\\n    }\\n\\n    function getPlayerStats(address _who)\\n    public\\n    view\\n    returns (\\n        uint256 level,\\n        uint256 experience,\\n        uint256 baseHealth,\\n        uint256 currentHealth,\\n        bool isPlayer\\n    )\\n    {\\n        Stats memory stats = playerStats[_who];\\n        return (stats.level, stats.experience, stats.baseHealth, stats.currentHealth, stats.isPlayer);\\n    }\\n\\n    function getPlayerBattleStats(address _who)\\n    public\\n    view\\n    returns (\\n        uint256 baseStrength,\\n        uint256 baseDexterity,\\n        uint256 baseDefence,\\n        uint256 baseConstitution\\n    )\\n    {\\n        BattleStats memory stats = playerStats[_who].battleStats;\\n\\n        return (stats.baseStrength, stats.baseDexterity, stats.baseDefence, stats.baseConstitution);\\n    }\\n\\n    function getPlayerFarmingStats(address _who)\\n    public\\n    view\\n    returns (\\n        uint256 _degeneracy,\\n        uint256 _chadary,\\n        uint256 _fomostition,\\n        uint256 _rugpullable\\n    )\\n    {\\n        FarmingStats memory stats = playerStats[_who].farmingStats;\\n\\n        return (stats.degeneracy, stats.chadary, stats.fomostition, stats.rugpullable);\\n    }\\n\\n    function increaseFarmingStats(\\n        address _who,\\n        uint256 _chadary,\\n        uint256 _degeneracy,\\n        uint256 _fomostition,\\n        uint256 _rugpullable\\n    ) public onlyPlayerManager existingPlayer(_who) {\\n        emit PlayerFarmingStatsUpdated(_who, _chadary, _degeneracy, _fomostition, _rugpullable);\\n\\n        playerStats[_who].farmingStats.chadary = playerStats[_who].farmingStats.chadary.add(_chadary);\\n        playerStats[_who].farmingStats.degeneracy = playerStats[_who].farmingStats.degeneracy.add(_degeneracy);\\n        playerStats[_who].farmingStats.fomostition = playerStats[_who].farmingStats.fomostition.add(_fomostition);\\n        playerStats[_who].farmingStats.rugpullable = playerStats[_who].farmingStats.rugpullable.add(_rugpullable);\\n    }\\n\\n    function increaseBattleStats(\\n        address _who,\\n        uint256 _strength,\\n        uint256 _dexterity,\\n        uint256 _defence,\\n        uint256 _constitution\\n    ) public onlyPlayerManager existingPlayer(_who) {\\n        emit PlayerBattleStatsUpdated(_who, _strength, _dexterity, _defence, _constitution);\\n\\n        playerStats[_who].battleStats.baseStrength = playerStats[_who].battleStats.baseStrength.add(_strength);\\n        playerStats[_who].battleStats.baseDexterity = playerStats[_who].battleStats.baseDexterity.add(_dexterity);\\n        playerStats[_who].battleStats.baseDefence = playerStats[_who].battleStats.baseDefence.add(_defence);\\n        playerStats[_who].battleStats.baseConstitution = playerStats[_who].battleStats.baseConstitution.add(\\n            _constitution\\n        );\\n    }\\n\\n    modifier onlyNewPlayer(address _who) {\\n        require(playerStats[_who].isPlayer == false, \\\"Player already exists\\\");\\n        _;\\n    }\\n\\n    modifier existingPlayer(address _who) {\\n        require(playerStats[_who].isPlayer, \\\"Player doesn't exist\\\");\\n        _;\\n    }\\n\\n    modifier onlyPlayerManager() {\\n        require(hasRole(PLAYER_MANAGER, msg.sender), \\\"Not Player Manager\\\");\\n        _;\\n    }\\n\\n    modifier onlyAdmin() {\\n        require(hasRole(ADMIN, msg.sender), \\\"Not Admin\\\");\\n        _;\\n    }\\n}\\n\",\"keccak256\":\"0xea2eedf0a8407498d9d0a00f29e76affc85ebb45240b1a7c9309f0b6023bd240\"},\"contracts/player/Treasury.sol\":{\"content\":\"pragma solidity ^0.6.0;\\n\\nimport \\\"@openzeppelin/contracts/access/AccessControl.sol\\\";\\nimport \\\"@openzeppelin/contracts/math/SafeMath.sol\\\";\\n\\nimport \\\"../Cash.sol\\\";\\n\\ncontract Treasury is AccessControl {\\n    using SafeMath for uint256;\\n\\n    bytes32 public constant ADMIN = keccak256(\\\"ADMIN\\\");\\n    bytes32 public constant CASH_SPENDER = keccak256(\\\"CASH_SPENDER\\\");\\n\\n    address private cashAddress;\\n    mapping(address => uint256) public balances;\\n\\n    constructor() public {\\n        _setupRole(ADMIN, msg.sender);\\n        _setRoleAdmin(CASH_SPENDER, ADMIN);\\n    }\\n\\n    function setCashAddress(address _cashAddress) public onlyAdmin {\\n        cashAddress = _cashAddress;\\n    }\\n\\n    function setCashSpender(address _who) public onlyAdmin {\\n        grantRole(CASH_SPENDER, _who);\\n    }\\n\\n    function depositCash(uint256 _amount) public {\\n        require(Cash(cashAddress).balanceOf(msg.sender) >= _amount, \\\"Insufficient funds\\\");\\n\\n        Cash(cashAddress).transferFrom(msg.sender, address(this), _amount);\\n        balances[msg.sender] = balances[msg.sender].add(_amount);\\n    }\\n\\n    function depositCashTo(address _who, uint256 _amount) public {\\n        require(Cash(cashAddress).balanceOf(msg.sender) >= _amount, \\\"Insufficient funds\\\");\\n\\n        Cash(cashAddress).transferFrom(msg.sender, address(this), _amount);\\n        balances[_who] = balances[_who].add(_amount);\\n    }\\n\\n    function spendCash(address _who, uint256 _amount) public onlyCashSpender {\\n        require(balances[_who] >= _amount);\\n\\n        balances[_who] = balances[_who].sub(_amount);\\n\\n        Cash(cashAddress).burn(_amount);\\n    }\\n\\n    modifier onlyAdmin() {\\n        require(hasRole(ADMIN, msg.sender), \\\"Not Admin\\\");\\n        _;\\n    }\\n\\n    modifier onlyCashSpender() {\\n        require(hasRole(CASH_SPENDER, msg.sender), \\\"Not Cash Spender\\\");\\n        _;\\n    }\\n}\\n\",\"keccak256\":\"0x8bd3974a5eb35ead47387e3929d8c1b6b9926a4c99dbdadd955dfee73d9b1fb1\"},\"contracts/schemes/BaseScheme.sol\":{\"content\":\"pragma solidity ^0.6.0;\\n\\nimport \\\"../utils/Random.sol\\\";\\nimport \\\"../Cash.sol\\\";\\nimport \\\"../player/Treasury.sol\\\";\\nimport \\\"../player/Player.sol\\\";\\n\\nabstract contract BaseScheme {\\n    uint256 constant MAX_UINT = 2**256 - 1;\\n\\n    event SchemeStarted(string name, address who, uint256 when);\\n\\n    uint256 public duration;\\n    uint256 internal experience;\\n    uint256 internal successChance;\\n\\n    address internal randomNumberGenerator;\\n    address internal cashContract;\\n    address internal treasuryAddress;\\n    address internal playerStatsAddress;\\n\\n    constructor(\\n        uint256 _duration,\\n        uint256 _experience,\\n        uint256 _successChance\\n    ) public {\\n        duration = _duration;\\n        experience = _experience;\\n        successChance = _successChance;\\n    }\\n\\n    function setRandomNumberGenerator(address _randomNumberGenerator) public {\\n        randomNumberGenerator = _randomNumberGenerator;\\n    }\\n\\n    function setCashContract(address _cashContractAddress) public {\\n        cashContract = _cashContractAddress;\\n        Cash(cashContract).approve(treasuryAddress, MAX_UINT);\\n    }\\n\\n    function setTreasury(address _treasuryAddress) public {\\n        treasuryAddress = _treasuryAddress;\\n    }\\n\\n    function setPlayerStats(address _playerStatsAddress) public {\\n        playerStatsAddress = _playerStatsAddress;\\n    }\\n\\n    function start(address _who) public virtual {\\n        emit SchemeStarted(getSchemeName(), _who, block.timestamp);\\n    }\\n\\n    function complete(address _who) public virtual onlySchemeManager {}\\n\\n    function getSchemeName() internal pure virtual returns (string memory) {\\n        return \\\"\\\";\\n    }\\n\\n    function getSuccessGauge() internal virtual returns (uint256 _successGauge) {\\n        return Random(randomNumberGenerator).random(100);\\n    }\\n\\n    function increaseStats(\\n        address _who,\\n        uint256 _chadary,\\n        uint256 _degeneracy,\\n        uint256 _fomostition,\\n        uint256 _rugpullable\\n    ) internal {\\n        PlayerStats(playerStatsAddress).increaseFarmingStats(_who, _chadary, _degeneracy, _fomostition, _rugpullable);\\n    }\\n\\n    function mint(address _who, uint256 _amount) internal {\\n        Cash(cashContract).mint(address(this), _amount);\\n        Treasury(treasuryAddress).depositCashTo(_who, _amount);\\n    }\\n\\n    function getScheme() public view returns (uint256 _duration, string memory _name) {\\n        return (duration, getSchemeName());\\n    }\\n\\n    modifier onlySchemeManager() {\\n        require(true);\\n        _;\\n    }\\n}\\n\",\"keccak256\":\"0xec52c9d9a23f1b0b50bfa3a6f04e047e20be66fcd11a4c5044f4161274a5fd0b\"},\"contracts/schemes/SchemeManager.sol\":{\"content\":\"pragma solidity ^0.6.0;\\n\\nimport \\\"@openzeppelin/contracts/math/SafeMath.sol\\\";\\nimport \\\"./BaseScheme.sol\\\";\\n\\ncontract SchemeManager {\\n    using SafeMath for uint256;\\n\\n    event SchemeAdded(address schemeAddress, uint256 id, uint256 when);\\n    event SchemeStarted(address schemeAddress, address who, uint256 when);\\n\\n    struct Scheme {\\n        address schemeAddress;\\n        bool isScheme;\\n    }\\n\\n    struct OngoingScheme {\\n        uint256 schemeId;\\n        uint256 timeStarted;\\n        uint256 timeCompleting;\\n    }\\n\\n    uint256 public nextSchemeId;\\n\\n    mapping(address => OngoingScheme) internal ongoingSchemes;\\n    mapping(address => bool) internal hasOngoingScheme;\\n\\n    mapping(uint256 => Scheme) public schemes;\\n\\n    constructor() public {\\n        nextSchemeId = 1;\\n    }\\n\\n    function addScheme(address _schemeAddress) public {\\n        emit SchemeAdded(_schemeAddress, nextSchemeId, block.timestamp);\\n\\n        schemes[nextSchemeId] = Scheme({schemeAddress: _schemeAddress, isScheme: true});\\n\\n        nextSchemeId = nextSchemeId.add(1);\\n    }\\n\\n    function startScheme(uint256 _schemeId) public {\\n        require(schemes[_schemeId].isScheme, \\\"Invalid scheme chosen\\\");\\n        require(hasOngoingScheme[msg.sender] == false, \\\"A scheme is already in progress\\\");\\n\\n        BaseScheme(schemes[_schemeId].schemeAddress).start(msg.sender);\\n\\n        start(msg.sender, _schemeId);\\n\\n        emit SchemeStarted(schemes[_schemeId].schemeAddress, msg.sender, block.timestamp);\\n    }\\n\\n    // todo scheme logic sits here and calls complete\\n    function completeScheme() public {\\n        require(hasOngoingScheme[msg.sender], \\\"No scheme in progress\\\");\\n        require(block.timestamp >= ongoingSchemes[msg.sender].timeCompleting, \\\"Scheme is not complete\\\");\\n\\n        uint256 schemeId = ongoingSchemes[msg.sender].schemeId;\\n        BaseScheme(schemes[schemeId].schemeAddress).complete(msg.sender);\\n\\n        complete(msg.sender, schemeId);\\n    }\\n\\n    function skipScheme() public {\\n        require(hasOngoingScheme[msg.sender], \\\"No scheme in progress\\\");\\n\\n        uint256 schemeId = ongoingSchemes[msg.sender].schemeId;\\n        BaseScheme(schemes[schemeId].schemeAddress).complete(msg.sender);\\n\\n        complete(msg.sender, schemeId);\\n    }\\n\\n    function listSchemes() public view returns (bool[] memory _schemes) {\\n        bool[] memory activeSchemes = new bool[](nextSchemeId);\\n\\n        for (uint256 i = 0; i < nextSchemeId; i++) {\\n            if (schemes[i].isScheme) {\\n                activeSchemes[i] = true;\\n            }\\n        }\\n\\n        return activeSchemes;\\n    }\\n\\n    function start(address _who, uint256 _schemeId) internal {\\n        require(false == hasOngoingScheme[_who], \\\"A scheme is already in progress\\\");\\n\\n        hasOngoingScheme[_who] = true;\\n\\n        ongoingSchemes[msg.sender].schemeId = _schemeId;\\n        ongoingSchemes[msg.sender].timeStarted = block.timestamp;\\n        ongoingSchemes[msg.sender].timeCompleting = block.timestamp.add(\\n            BaseScheme(schemes[_schemeId].schemeAddress).duration()\\n        );\\n    }\\n\\n    function complete(address _who, uint256 _schemeId) internal {\\n        require(hasOngoingScheme[msg.sender], \\\"No scheme in progress\\\");\\n\\n        hasOngoingScheme[_who] = false;\\n\\n        ongoingSchemes[msg.sender].schemeId = 0;\\n        ongoingSchemes[msg.sender].timeStarted = 0;\\n        ongoingSchemes[msg.sender].timeCompleting = 0;\\n    }\\n\\n    function getOngoingScheme(address _who)\\n        public\\n        view\\n        returns (\\n            bool _isOngoing,\\n            uint256 _schemeId,\\n            address _schemeAddress,\\n            uint256 _timeStarted,\\n            uint256 _timeCompleting\\n        )\\n    {\\n        if (hasOngoingScheme[_who]) {\\n            uint256 schemeId = ongoingSchemes[_who].schemeId;\\n\\n            return (\\n                true,\\n                schemeId,\\n                schemes[schemeId].schemeAddress,\\n                ongoingSchemes[_who].timeStarted,\\n                ongoingSchemes[_who].timeCompleting\\n            );\\n        }\\n        return (false, 0, address(0), 0, 0);\\n    }\\n}\\n\",\"keccak256\":\"0xaeaf70fed674b46e631c36e617f4a246ea7078ace9fca1c7378a2b8261066da4\"},\"contracts/utils/Random.sol\":{\"content\":\"pragma solidity ^0.6.0;\\n\\ncontract Random {\\n    uint64 _seed = 23456789876543;\\n\\n    function random(uint64 upper) public returns (uint256 randomNumber) {\\n        return uint256(keccak256(abi.encodePacked(now, block.coinbase, _seed))) % upper;\\n    }\\n}\\n\",\"keccak256\":\"0x0e3e25c4ac34faf016f7d5943913905dab1921e10dd41cdf738c64551b5963e8\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b5060016000556109ac806100256000396000f3fe608060405234801561001057600080fd5b50600436106100885760003560e01c80638657fa791161005b5780638657fa7914610135578063b1f7c7e01461018d578063bb52085e146101a7578063cd8321c1146101e757610088565b806301f66ef41461008d57806351e65d64146100ac578063589de82d146100b45780635b510dbb146100da575b600080fd5b6100aa600480360360208110156100a357600080fd5b50356101ef565b005b6100aa610388565b6100aa600480360360208110156100ca57600080fd5b50356001600160a01b03166104cd565b610100600480360360208110156100f057600080fd5b50356001600160a01b0316610588565b60408051951515865260208601949094526001600160a01b039092168484015260608401526080830152519081900360a00190f35b61013d610617565b60408051602080825283518183015283519192839290830191858101910280838360005b83811015610179578181015183820152602001610161565b505050509050019250505060405180910390f35b6101956106b8565b60408051918252519081900360200190f35b6101c4600480360360208110156101bd57600080fd5b50356106be565b604080516001600160a01b03909316835290151560208301528051918290030190f35b6100aa6106e5565b600081815260036020526040902054600160a01b900460ff16610251576040805162461bcd60e51b815260206004820152601560248201527424b73b30b634b21039b1b432b6b29031b437b9b2b760591b604482015290519081900360640190fd5b3360009081526002602052604090205460ff16156102b6576040805162461bcd60e51b815260206004820152601f60248201527f4120736368656d6520697320616c726561647920696e2070726f677265737300604482015290519081900360640190fd5b600081815260036020526040808220548151636e85940f60e11b815233600482015291516001600160a01b039091169263dd0b281e926024808201939182900301818387803b15801561030857600080fd5b505af115801561031c573d6000803e3d6000fd5b5050505061032a3382610741565b6000818152600360209081526040918290205482516001600160a01b0390911681523391810191909152428183015290517f40cb373538b7861d93a435fa219ff941fb43218e6a163f4d76d175ba3c1d8c409181900360600190a150565b3360009081526002602052604090205460ff166103e4576040805162461bcd60e51b81526020600482015260156024820152744e6f20736368656d6520696e2070726f677265737360581b604482015290519081900360640190fd5b33600090815260016020526040902060020154421015610444576040805162461bcd60e51b8152602060048201526016602482015275536368656d65206973206e6f7420636f6d706c65746560501b604482015290519081900360640190fd5b3360008181526001602090815260408083205480845260039092528083205481516349d7814960e11b81526004810195909552905191936001600160a01b03909116926393af02929260248084019382900301818387803b1580156104a857600080fd5b505af11580156104bc573d6000803e3d6000fd5b505050506104ca338261087e565b50565b600054604080516001600160a01b038416815260208101929092524282820152517f1e674b98e7b5009696cddd1156cc26a69d6577667254d8b810d889d357128d9a9181900360600190a16040805180820182526001600160a01b0383811682526001602080840182815260008054815260039092529481209351845495516001600160a01b031990961693169290921760ff60a01b1916600160a01b94151594909402939093179091555461058291610915565b60005550565b6001600160a01b038116600090815260026020526040812054819081908190819060ff16156105fe57505050506001600160a01b0382811660008181526001602081815260408084208054808652600384529185205495909452908290528282015460029093015491955093929092169161060e565b5060009350839250829150819050805b91939590929450565b60608060005467ffffffffffffffff8111801561063357600080fd5b5060405190808252806020026020018201604052801561065d578160200160208202803683370190505b50905060005b6000548110156106b257600081815260036020526040902054600160a01b900460ff16156106aa57600182828151811061069957fe5b911515602092830291909101909101525b600101610663565b50905090565b60005481565b6003602052600090815260409020546001600160a01b03811690600160a01b900460ff1682565b3360009081526002602052604090205460ff16610444576040805162461bcd60e51b81526020600482015260156024820152744e6f20736368656d6520696e2070726f677265737360581b604482015290519081900360640190fd5b6001600160a01b03821660009081526002602052604090205460ff16156107af576040805162461bcd60e51b815260206004820152601f60248201527f4120736368656d6520697320616c726561647920696e2070726f677265737300604482015290519081900360640190fd5b6001600160a01b038083166000908152600260209081526040808320805460ff191660019081179091553384528083528184208681554291015584835260038252918290205482516303ed69ad60e21b81529251610867949190911692630fb5a6b4926004808301939192829003018186803b15801561082e57600080fd5b505afa158015610842573d6000803e3d6000fd5b505050506040513d602081101561085857600080fd5b5051429063ffffffff61091516565b336000908152600160205260409020600201555050565b3360009081526002602052604090205460ff166108da576040805162461bcd60e51b81526020600482015260156024820152744e6f20736368656d6520696e2070726f677265737360581b604482015290519081900360640190fd5b506001600160a01b03166000908152600260208181526040808420805460ff1916905533845260019182905283208381559081018390550155565b60008282018381101561096f576040805162461bcd60e51b815260206004820152601b60248201527f536166654d6174683a206164646974696f6e206f766572666c6f770000000000604482015290519081900360640190fd5b939250505056fea26469706673582212208afdba9f01e4d118d5df9fdfefe4def9ed5ce65c1e78b3e12208903dd2f2dc0464736f6c63430006080033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100885760003560e01c80638657fa791161005b5780638657fa7914610135578063b1f7c7e01461018d578063bb52085e146101a7578063cd8321c1146101e757610088565b806301f66ef41461008d57806351e65d64146100ac578063589de82d146100b45780635b510dbb146100da575b600080fd5b6100aa600480360360208110156100a357600080fd5b50356101ef565b005b6100aa610388565b6100aa600480360360208110156100ca57600080fd5b50356001600160a01b03166104cd565b610100600480360360208110156100f057600080fd5b50356001600160a01b0316610588565b60408051951515865260208601949094526001600160a01b039092168484015260608401526080830152519081900360a00190f35b61013d610617565b60408051602080825283518183015283519192839290830191858101910280838360005b83811015610179578181015183820152602001610161565b505050509050019250505060405180910390f35b6101956106b8565b60408051918252519081900360200190f35b6101c4600480360360208110156101bd57600080fd5b50356106be565b604080516001600160a01b03909316835290151560208301528051918290030190f35b6100aa6106e5565b600081815260036020526040902054600160a01b900460ff16610251576040805162461bcd60e51b815260206004820152601560248201527424b73b30b634b21039b1b432b6b29031b437b9b2b760591b604482015290519081900360640190fd5b3360009081526002602052604090205460ff16156102b6576040805162461bcd60e51b815260206004820152601f60248201527f4120736368656d6520697320616c726561647920696e2070726f677265737300604482015290519081900360640190fd5b600081815260036020526040808220548151636e85940f60e11b815233600482015291516001600160a01b039091169263dd0b281e926024808201939182900301818387803b15801561030857600080fd5b505af115801561031c573d6000803e3d6000fd5b5050505061032a3382610741565b6000818152600360209081526040918290205482516001600160a01b0390911681523391810191909152428183015290517f40cb373538b7861d93a435fa219ff941fb43218e6a163f4d76d175ba3c1d8c409181900360600190a150565b3360009081526002602052604090205460ff166103e4576040805162461bcd60e51b81526020600482015260156024820152744e6f20736368656d6520696e2070726f677265737360581b604482015290519081900360640190fd5b33600090815260016020526040902060020154421015610444576040805162461bcd60e51b8152602060048201526016602482015275536368656d65206973206e6f7420636f6d706c65746560501b604482015290519081900360640190fd5b3360008181526001602090815260408083205480845260039092528083205481516349d7814960e11b81526004810195909552905191936001600160a01b03909116926393af02929260248084019382900301818387803b1580156104a857600080fd5b505af11580156104bc573d6000803e3d6000fd5b505050506104ca338261087e565b50565b600054604080516001600160a01b038416815260208101929092524282820152517f1e674b98e7b5009696cddd1156cc26a69d6577667254d8b810d889d357128d9a9181900360600190a16040805180820182526001600160a01b0383811682526001602080840182815260008054815260039092529481209351845495516001600160a01b031990961693169290921760ff60a01b1916600160a01b94151594909402939093179091555461058291610915565b60005550565b6001600160a01b038116600090815260026020526040812054819081908190819060ff16156105fe57505050506001600160a01b0382811660008181526001602081815260408084208054808652600384529185205495909452908290528282015460029093015491955093929092169161060e565b5060009350839250829150819050805b91939590929450565b60608060005467ffffffffffffffff8111801561063357600080fd5b5060405190808252806020026020018201604052801561065d578160200160208202803683370190505b50905060005b6000548110156106b257600081815260036020526040902054600160a01b900460ff16156106aa57600182828151811061069957fe5b911515602092830291909101909101525b600101610663565b50905090565b60005481565b6003602052600090815260409020546001600160a01b03811690600160a01b900460ff1682565b3360009081526002602052604090205460ff16610444576040805162461bcd60e51b81526020600482015260156024820152744e6f20736368656d6520696e2070726f677265737360581b604482015290519081900360640190fd5b6001600160a01b03821660009081526002602052604090205460ff16156107af576040805162461bcd60e51b815260206004820152601f60248201527f4120736368656d6520697320616c726561647920696e2070726f677265737300604482015290519081900360640190fd5b6001600160a01b038083166000908152600260209081526040808320805460ff191660019081179091553384528083528184208681554291015584835260038252918290205482516303ed69ad60e21b81529251610867949190911692630fb5a6b4926004808301939192829003018186803b15801561082e57600080fd5b505afa158015610842573d6000803e3d6000fd5b505050506040513d602081101561085857600080fd5b5051429063ffffffff61091516565b336000908152600160205260409020600201555050565b3360009081526002602052604090205460ff166108da576040805162461bcd60e51b81526020600482015260156024820152744e6f20736368656d6520696e2070726f677265737360581b604482015290519081900360640190fd5b506001600160a01b03166000908152600260208181526040808420805460ff1916905533845260019182905283208381559081018390550155565b60008282018381101561096f576040805162461bcd60e51b815260206004820152601b60248201527f536166654d6174683a206164646974696f6e206f766572666c6f770000000000604482015290519081900360640190fd5b939250505056fea26469706673582212208afdba9f01e4d118d5df9fdfefe4def9ed5ce65c1e78b3e12208903dd2f2dc0464736f6c63430006080033",
  "devdoc": {
    "methods": {}
  },
  "userdoc": {
    "methods": {}
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 5327,
        "contract": "contracts/schemes/SchemeManager.sol:SchemeManager",
        "label": "nextSchemeId",
        "offset": 0,
        "slot": "0",
        "type": "t_uint256"
      },
      {
        "astId": 5331,
        "contract": "contracts/schemes/SchemeManager.sol:SchemeManager",
        "label": "ongoingSchemes",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_address,t_struct(OngoingScheme)5325_storage)"
      },
      {
        "astId": 5335,
        "contract": "contracts/schemes/SchemeManager.sol:SchemeManager",
        "label": "hasOngoingScheme",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 5339,
        "contract": "contracts/schemes/SchemeManager.sol:SchemeManager",
        "label": "schemes",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_uint256,t_struct(Scheme)5318_storage)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_struct(OngoingScheme)5325_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct SchemeManager.OngoingScheme)",
        "numberOfBytes": "32",
        "value": "t_struct(OngoingScheme)5325_storage"
      },
      "t_mapping(t_uint256,t_struct(Scheme)5318_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct SchemeManager.Scheme)",
        "numberOfBytes": "32",
        "value": "t_struct(Scheme)5318_storage"
      },
      "t_struct(OngoingScheme)5325_storage": {
        "encoding": "inplace",
        "label": "struct SchemeManager.OngoingScheme",
        "members": [
          {
            "astId": 5320,
            "contract": "contracts/schemes/SchemeManager.sol:SchemeManager",
            "label": "schemeId",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 5322,
            "contract": "contracts/schemes/SchemeManager.sol:SchemeManager",
            "label": "timeStarted",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 5324,
            "contract": "contracts/schemes/SchemeManager.sol:SchemeManager",
            "label": "timeCompleting",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "96"
      },
      "t_struct(Scheme)5318_storage": {
        "encoding": "inplace",
        "label": "struct SchemeManager.Scheme",
        "members": [
          {
            "astId": 5315,
            "contract": "contracts/schemes/SchemeManager.sol:SchemeManager",
            "label": "schemeAddress",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 5317,
            "contract": "contracts/schemes/SchemeManager.sol:SchemeManager",
            "label": "isScheme",
            "offset": 20,
            "slot": "0",
            "type": "t_bool"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}