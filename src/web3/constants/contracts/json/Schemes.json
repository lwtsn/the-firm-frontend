{
  "address": "0xDc64a140Aa3E981100a9becA4E685f962f0cF6C9",
  "abi": [
    {
      "inputs": [],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_schemeAddress",
          "type": "address"
        }
      ],
      "name": "addScheme",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "completeScheme",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_who",
          "type": "address"
        }
      ],
      "name": "getOngoingScheme",
      "outputs": [
        {
          "internalType": "bool",
          "name": "_isOngoing",
          "type": "bool"
        },
        {
          "internalType": "uint256",
          "name": "_schemeId",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_schemeAddress",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_timeStarted",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_timeCompleting",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "listSchemes",
      "outputs": [
        {
          "internalType": "bool[]",
          "name": "_schemes",
          "type": "bool[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "nextSchemeId",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "schemes",
      "outputs": [
        {
          "internalType": "address",
          "name": "schemeAddress",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "isScheme",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_schemeId",
          "type": "uint256"
        }
      ],
      "name": "startScheme",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x30cc4be919643a4b9f64e4b66ecf1fa0eacc22af9feddd970fa8982d49b04a67",
  "receipt": {
    "to": null,
    "from": "0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266",
    "contractAddress": "0xDc64a140Aa3E981100a9becA4E685f962f0cF6C9",
    "transactionIndex": 0,
    "gasUsed": "532508",
    "logsBloom": "0x
    "blockHash": "0x3782cb1a9376e337c8e760af902c0cfd4a32d9cc7b6fd5b37b914b88c6f3f640",
    "transactionHash": "0x30cc4be919643a4b9f64e4b66ecf1fa0eacc22af9feddd970fa8982d49b04a67",
    "logs": [],
    "blockNumber": 11456653,
    "cumulativeGasUsed": "532508",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "solcInputHash": "95edde3b810702dab6b59778bcd41322",
  "metadata": "{\"compiler\":{\"version\":\"0.6.8+commit.0bbfe453\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_schemeAddress\",\"type\":\"address\"}],\"name\":\"addScheme\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"completeScheme\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_who\",\"type\":\"address\"}],\"name\":\"getOngoingScheme\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"_isOngoing\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"_schemeId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_schemeAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_timeStarted\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_timeCompleting\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"listSchemes\",\"outputs\":[{\"internalType\":\"bool[]\",\"name\":\"_schemes\",\"type\":\"bool[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nextSchemeId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"schemes\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"schemeAddress\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"isScheme\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_schemeId\",\"type\":\"uint256\"}],\"name\":\"startScheme\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"methods\":{}},\"userdoc\":{\"methods\":{}}},\"settings\":{\"compilationTarget\":{\"contracts/schemes/Schemes.sol\":\"Schemes\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/GSN/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.0;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with GSN meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address payable) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes memory) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xdb26cbf4d028490f49831a7865c2fe1b28db44b535ca8d343785a3b768aae183\",\"license\":\"MIT\"},\"@openzeppelin/contracts/math/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.0;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return sub(a, b, \\\"SafeMath: subtraction overflow\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        uint256 c = a - b;\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return div(a, b, \\\"SafeMath: division by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        uint256 c = a / b;\\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return mod(a, b, \\\"SafeMath: modulo by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts with custom message when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b != 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\",\"keccak256\":\"0x9a9cf02622cd7a64261b10534fc3260449da25c98c9e96d1b4ae8110a20e5806\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/ERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.0;\\n\\nimport \\\"../../GSN/Context.sol\\\";\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"../../math/SafeMath.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin guidelines: functions revert instead\\n * of returning `false` on failure. This behavior is nonetheless conventional\\n * and does not conflict with the expectations of ERC20 applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20 is Context, IERC20 {\\n    using SafeMath for uint256;\\n    using Address for address;\\n\\n    mapping (address => uint256) private _balances;\\n\\n    mapping (address => mapping (address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n    uint8 private _decimals;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}, initializes {decimals} with\\n     * a default value of 18.\\n     *\\n     * To select a different value for {decimals}, use {_setupDecimals}.\\n     *\\n     * All three of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor (string memory name, string memory symbol) public {\\n        _name = name;\\n        _symbol = symbol;\\n        _decimals = 18;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5,05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the value {ERC20} uses, unless {_setupDecimals} is\\n     * called.\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view returns (uint8) {\\n        return _decimals;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `recipient` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\\n        _transfer(_msgSender(), recipient, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        _approve(_msgSender(), spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20};\\n     *\\n     * Requirements:\\n     * - `sender` and `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``sender``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) public virtual override returns (bool) {\\n        _transfer(sender, recipient, amount);\\n        _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, \\\"ERC20: transfer amount exceeds allowance\\\"));\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, \\\"ERC20: decreased allowance below zero\\\"));\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves tokens `amount` from `sender` to `recipient`.\\n     *\\n     * This is internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` cannot be the zero address.\\n     * - `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     */\\n    function _transfer(address sender, address recipient, uint256 amount) internal virtual {\\n        require(sender != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(recipient != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(sender, recipient, amount);\\n\\n        _balances[sender] = _balances[sender].sub(amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        _balances[recipient] = _balances[recipient].add(amount);\\n        emit Transfer(sender, recipient, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements\\n     *\\n     * - `to` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply = _totalSupply.add(amount);\\n        _balances[account] = _balances[account].add(amount);\\n        emit Transfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        _balances[account] = _balances[account].sub(amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        _totalSupply = _totalSupply.sub(amount);\\n        emit Transfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(address owner, address spender, uint256 amount) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Sets {decimals} to a value other than the default one of 18.\\n     *\\n     * WARNING: This function should only be called from the constructor. Most\\n     * applications that interact with token contracts will not expect\\n     * {decimals} to ever change, and may work incorrectly if it does.\\n     */\\n    function _setupDecimals(uint8 decimals_) internal {\\n        _decimals = decimals_;\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be to transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual { }\\n}\\n\",\"keccak256\":\"0x91e0bd6a6762d2a1700dab0849de8422611355100576c4beef1e80d82a4104a0\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x5c26b39d26f7ed489e555d955dcd3e01872972e71fdd1528e93ec164e4f23385\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.2;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies in extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { size := extcodesize(account) }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\n        (bool success, ) = recipient.call{ value: amount }(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain`call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n      return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        return _functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        return _functionCallWithValue(target, data, value, errorMessage);\\n    }\\n\\n    function _functionCallWithValue(address target, bytes memory data, uint256 weiValue, string memory errorMessage) private returns (bytes memory) {\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.call{ value: weiValue }(data);\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf5fa8cbdffa5ef8be49b246b5628facc30b71707e78a45d80d93b64eff3fe390\",\"license\":\"MIT\"},\"contracts/Cash.sol\":{\"content\":\"pragma solidity ^0.6.0;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\n\\ncontract Cash is ERC20 {\\n    constructor() public ERC20(\\\"CASH\\\", \\\"CA$H\\\") {}\\n\\n    function burn(uint256 _amount) public {\\n        super._burn(msg.sender, _amount);\\n    }\\n\\n    function mint(address _who, uint256 _amount) public {\\n        super._mint(_who, _amount);\\n    }\\n}\\n\",\"keccak256\":\"0x52b850e2055a0b84d5b5d1b7117df77240bd196cb5c51daf72b5750f7c6cae45\"},\"contracts/schemes/BaseScheme.sol\":{\"content\":\"pragma solidity ^0.6.0;\\n\\nimport \\\"../utils/Random.sol\\\";\\nimport \\\"../Cash.sol\\\";\\n\\nabstract contract BaseScheme {\\n\\n    event SchemeStarted(string name, address who, uint256 when);\\n\\n    uint256 public duration;\\n    uint256 internal experience;\\n    uint256 internal successChance;\\n\\n    address internal randomNumberGenerator;\\n    address internal cashContract;\\n\\n    constructor(\\n        uint256 _duration,\\n        uint256 _experience,\\n        uint256 _successChance\\n    ) public {\\n        duration = _duration;\\n        experience = _experience;\\n        successChance = _successChance;\\n    }\\n\\n    function setRandomNumberGenerator(address _randomNumberGenerator) public {\\n        randomNumberGenerator = _randomNumberGenerator;\\n    }\\n\\n    function setCashContract(address _cashContractAddress) public {\\n        cashContract = _cashContractAddress;\\n    }\\n\\n    function start(address _who) virtual public {\\n        emit SchemeStarted(getSchemeName(), _who, block.timestamp);\\n    }\\n\\n    function complete(address _who) onlySchemeManager virtual public {}\\n\\n    function getSchemeName() virtual pure internal returns (string memory) {\\n        return \\\"\\\";\\n    }\\n\\n    function getSuccessGauge() internal virtual returns (uint256 _successGauge) {\\n        return Random(randomNumberGenerator).random(100);\\n    }\\n\\n    function mint(address _who, uint256 _amount) internal {\\n        Cash(cashContract).mint(_who, _amount);\\n    }\\n\\n    function getScheme() public view returns (uint256 _duration, string memory _name) {\\n        return (duration, getSchemeName());\\n    }\\n\\n    modifier onlySchemeManager() {\\n        require(true);\\n        _;\\n    }\\n}\\n\",\"keccak256\":\"0xd9a4e348e7a083707074b3d6fe7ad2c0604e176bf354e9d952c3c8da83e786c3\"},\"contracts/schemes/Schemes.sol\":{\"content\":\"pragma solidity ^0.6.0;\\n\\nimport \\\"@openzeppelin/contracts/math/SafeMath.sol\\\";\\nimport \\\"./BaseScheme.sol\\\";\\n\\ncontract Schemes {\\n    using SafeMath for uint256;\\n\\n    struct Scheme {\\n        address schemeAddress;\\n        bool isScheme;\\n    }\\n\\n    struct OngoingScheme {\\n        uint256 schemeId;\\n        uint256 timeStarted;\\n        uint256 timeCompleting;\\n    }\\n\\n    uint public nextSchemeId;\\n\\n    mapping(address => OngoingScheme) internal ongoingSchemes;\\n    mapping(address => bool) internal hasOngoingScheme;\\n\\n    mapping(uint256 => Scheme) public schemes;\\n\\n    constructor() public {\\n        nextSchemeId = 1;\\n    }\\n\\n    function addScheme(address _schemeAddress) public {\\n        schemes[nextSchemeId] = Scheme({\\n        schemeAddress : _schemeAddress,\\n        isScheme : true\\n        });\\n\\n        nextSchemeId = nextSchemeId.add(1);\\n    }\\n\\n    function startScheme(uint256 _schemeId) public {\\n        require(schemes[_schemeId].isScheme, \\\"Invalid scheme chosen\\\");\\n        require(hasOngoingScheme[msg.sender] == false, \\\"A scheme is already in progress\\\");\\n\\n        BaseScheme(schemes[_schemeId].schemeAddress).start(msg.sender);\\n\\n        start(msg.sender, _schemeId);\\n    }\\n\\n    function completeScheme() public {\\n        require(hasOngoingScheme[msg.sender], \\\"No scheme in progress\\\");\\n        require(block.timestamp >= ongoingSchemes[msg.sender].timeCompleting, \\\"Scheme is not complete\\\");\\n\\n        uint256 schemeId = ongoingSchemes[msg.sender].schemeId;\\n        BaseScheme(schemes[schemeId].schemeAddress).complete(msg.sender);\\n\\n        complete(msg.sender, schemeId);\\n    }\\n\\n    function listSchemes() public view returns (bool[] memory _schemes) {\\n        bool[] memory activeSchemes = new bool[](nextSchemeId);\\n\\n        for (uint256 i = 0; i < nextSchemeId; i++) {\\n            if (schemes[i].isScheme) {\\n                activeSchemes[i] = true;\\n            }\\n        }\\n\\n        return activeSchemes;\\n    }\\n\\n    function start(address _who, uint256 _schemeId) internal {\\n        require(false == hasOngoingScheme[_who], \\\"A scheme is already in progress\\\");\\n\\n        hasOngoingScheme[_who] = true;\\n\\n        ongoingSchemes[msg.sender].schemeId = _schemeId;\\n        ongoingSchemes[msg.sender].timeStarted = block.timestamp;\\n        ongoingSchemes[msg.sender].timeCompleting = block.timestamp.add(\\n            BaseScheme(schemes[_schemeId].schemeAddress).duration()\\n        );\\n    }\\n\\n    function complete(address _who, uint256 _schemeId) internal {\\n        require(hasOngoingScheme[msg.sender], \\\"No scheme in progress\\\");\\n\\n        hasOngoingScheme[_who] = false;\\n\\n        ongoingSchemes[msg.sender].schemeId = 0;\\n        ongoingSchemes[msg.sender].timeStarted = 0;\\n        ongoingSchemes[msg.sender].timeCompleting = 0;\\n    }\\n\\n    function getOngoingScheme(address _who) public view returns (\\n        bool _isOngoing,\\n        uint256 _schemeId,\\n        address _schemeAddress,\\n        uint256 _timeStarted,\\n        uint256 _timeCompleting\\n    ) {\\n        if (hasOngoingScheme[_who]) {\\n            uint256 schemeId = ongoingSchemes[_who].schemeId;\\n\\n            return (\\n            true,\\n            schemeId,\\n            schemes[schemeId].schemeAddress,\\n            ongoingSchemes[_who].timeStarted,\\n            ongoingSchemes[_who].timeCompleting\\n            );\\n        }\\n        return (false, 0, address(0), 0, 0);\\n    }\\n}\\n\",\"keccak256\":\"0x7a1c598e0b1746e7801587c4a0cb1f7ca3a2cd83c4c985c67b1b3d7ce2587cf1\"},\"contracts/utils/Random.sol\":{\"content\":\"pragma solidity ^0.6.0;\\n\\ncontract Random {\\n    uint64 _seed = 23456789876543;\\n\\n    function random(uint64 upper) public returns (uint randomNumber) {\\n        return uint(keccak256(abi.encodePacked(now, block.coinbase, _seed))) % upper;\\n    }\\n}\\n\",\"keccak256\":\"0x9a578553d5b34c55e024e9034605508469b421f54f8a5d121ca315582cf3b962\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b506001600055610894806100256000396000f3fe608060405234801561001057600080fd5b506004361061007d5760003560e01c80635b510dbb1161005b5780635b510dbb146100cf5780638657fa791461012a578063b1f7c7e014610182578063bb52085e1461019c5761007d565b806301f66ef41461008257806351e65d64146100a1578063589de82d146100a9575b600080fd5b61009f6004803603602081101561009857600080fd5b50356101dc565b005b61009f61031a565b61009f600480360360208110156100bf57600080fd5b50356001600160a01b031661045c565b6100f5600480360360208110156100e557600080fd5b50356001600160a01b03166104cc565b60408051951515865260208601949094526001600160a01b039092168484015260608401526080830152519081900360a00190f35b61013261055b565b60408051602080825283518183015283519192839290830191858101910280838360005b8381101561016e578181015183820152602001610156565b505050509050019250505060405180910390f35b61018a6105fc565b60408051918252519081900360200190f35b6101b9600480360360208110156101b257600080fd5b5035610602565b604080516001600160a01b03909316835290151560208301528051918290030190f35b600081815260036020526040902054600160a01b900460ff1661023e576040805162461bcd60e51b815260206004820152601560248201527424b73b30b634b21039b1b432b6b29031b437b9b2b760591b604482015290519081900360640190fd5b3360009081526002602052604090205460ff16156102a3576040805162461bcd60e51b815260206004820152601f60248201527f4120736368656d6520697320616c726561647920696e2070726f677265737300604482015290519081900360640190fd5b600081815260036020526040808220548151636e85940f60e11b815233600482015291516001600160a01b039091169263dd0b281e926024808201939182900301818387803b1580156102f557600080fd5b505af1158015610309573d6000803e3d6000fd5b505050506103173382610629565b50565b3360009081526002602052604090205460ff16610376576040805162461bcd60e51b81526020600482015260156024820152744e6f20736368656d6520696e2070726f677265737360581b604482015290519081900360640190fd5b336000908152600160205260409020600201544210156103d6576040805162461bcd60e51b8152602060048201526016602482015275536368656d65206973206e6f7420636f6d706c65746560501b604482015290519081900360640190fd5b3360008181526001602090815260408083205480845260039092528083205481516349d7814960e11b81526004810195909552905191936001600160a01b03909116926393af02929260248084019382900301818387803b15801561043a57600080fd5b505af115801561044e573d6000803e3d6000fd5b505050506103173382610766565b6040805180820182526001600160a01b0383811682526001602080840182815260008054815260039092529481209351845495516001600160a01b031990961693169290921760ff60a01b1916600160a01b9415159490940293909317909155546104c6916107fd565b60005550565b6001600160a01b038116600090815260026020526040812054819081908190819060ff161561054257505050506001600160a01b03828116600081815260016020818152604080842080548086526003845291852054959094529082905282820154600290930154919550939290921691610552565b5060009350839250829150819050805b91939590929450565b60608060005467ffffffffffffffff8111801561057757600080fd5b506040519080825280602002602001820160405280156105a1578160200160208202803683370190505b50905060005b6000548110156105f657600081815260036020526040902054600160a01b900460ff16156105ee5760018282815181106105dd57fe5b911515602092830291909101909101525b6001016105a7565b50905090565b60005481565b6003602052600090815260409020546001600160a01b03811690600160a01b900460ff1682565b6001600160a01b03821660009081526002602052604090205460ff1615610697576040805162461bcd60e51b815260206004820152601f60248201527f4120736368656d6520697320616c726561647920696e2070726f677265737300604482015290519081900360640190fd5b6001600160a01b038083166000908152600260209081526040808320805460ff191660019081179091553384528083528184208681554291015584835260038252918290205482516303ed69ad60e21b8152925161074f949190911692630fb5a6b4926004808301939192829003018186803b15801561071657600080fd5b505afa15801561072a573d6000803e3d6000fd5b505050506040513d602081101561074057600080fd5b5051429063ffffffff6107fd16565b336000908152600160205260409020600201555050565b3360009081526002602052604090205460ff166107c2576040805162461bcd60e51b81526020600482015260156024820152744e6f20736368656d6520696e2070726f677265737360581b604482015290519081900360640190fd5b506001600160a01b03166000908152600260208181526040808420805460ff1916905533845260019182905283208381559081018390550155565b600082820183811015610857576040805162461bcd60e51b815260206004820152601b60248201527f536166654d6174683a206164646974696f6e206f766572666c6f770000000000604482015290519081900360640190fd5b939250505056fea26469706673582212205e2b624bb8a8601deda2042eb9697f3be42fdd13eb00a78e002ea2ebed11a7e464736f6c63430006080033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b506004361061007d5760003560e01c80635b510dbb1161005b5780635b510dbb146100cf5780638657fa791461012a578063b1f7c7e014610182578063bb52085e1461019c5761007d565b806301f66ef41461008257806351e65d64146100a1578063589de82d146100a9575b600080fd5b61009f6004803603602081101561009857600080fd5b50356101dc565b005b61009f61031a565b61009f600480360360208110156100bf57600080fd5b50356001600160a01b031661045c565b6100f5600480360360208110156100e557600080fd5b50356001600160a01b03166104cc565b60408051951515865260208601949094526001600160a01b039092168484015260608401526080830152519081900360a00190f35b61013261055b565b60408051602080825283518183015283519192839290830191858101910280838360005b8381101561016e578181015183820152602001610156565b505050509050019250505060405180910390f35b61018a6105fc565b60408051918252519081900360200190f35b6101b9600480360360208110156101b257600080fd5b5035610602565b604080516001600160a01b03909316835290151560208301528051918290030190f35b600081815260036020526040902054600160a01b900460ff1661023e576040805162461bcd60e51b815260206004820152601560248201527424b73b30b634b21039b1b432b6b29031b437b9b2b760591b604482015290519081900360640190fd5b3360009081526002602052604090205460ff16156102a3576040805162461bcd60e51b815260206004820152601f60248201527f4120736368656d6520697320616c726561647920696e2070726f677265737300604482015290519081900360640190fd5b600081815260036020526040808220548151636e85940f60e11b815233600482015291516001600160a01b039091169263dd0b281e926024808201939182900301818387803b1580156102f557600080fd5b505af1158015610309573d6000803e3d6000fd5b505050506103173382610629565b50565b3360009081526002602052604090205460ff16610376576040805162461bcd60e51b81526020600482015260156024820152744e6f20736368656d6520696e2070726f677265737360581b604482015290519081900360640190fd5b336000908152600160205260409020600201544210156103d6576040805162461bcd60e51b8152602060048201526016602482015275536368656d65206973206e6f7420636f6d706c65746560501b604482015290519081900360640190fd5b3360008181526001602090815260408083205480845260039092528083205481516349d7814960e11b81526004810195909552905191936001600160a01b03909116926393af02929260248084019382900301818387803b15801561043a57600080fd5b505af115801561044e573d6000803e3d6000fd5b505050506103173382610766565b6040805180820182526001600160a01b0383811682526001602080840182815260008054815260039092529481209351845495516001600160a01b031990961693169290921760ff60a01b1916600160a01b9415159490940293909317909155546104c6916107fd565b60005550565b6001600160a01b038116600090815260026020526040812054819081908190819060ff161561054257505050506001600160a01b03828116600081815260016020818152604080842080548086526003845291852054959094529082905282820154600290930154919550939290921691610552565b5060009350839250829150819050805b91939590929450565b60608060005467ffffffffffffffff8111801561057757600080fd5b506040519080825280602002602001820160405280156105a1578160200160208202803683370190505b50905060005b6000548110156105f657600081815260036020526040902054600160a01b900460ff16156105ee5760018282815181106105dd57fe5b911515602092830291909101909101525b6001016105a7565b50905090565b60005481565b6003602052600090815260409020546001600160a01b03811690600160a01b900460ff1682565b6001600160a01b03821660009081526002602052604090205460ff1615610697576040805162461bcd60e51b815260206004820152601f60248201527f4120736368656d6520697320616c726561647920696e2070726f677265737300604482015290519081900360640190fd5b6001600160a01b038083166000908152600260209081526040808320805460ff191660019081179091553384528083528184208681554291015584835260038252918290205482516303ed69ad60e21b8152925161074f949190911692630fb5a6b4926004808301939192829003018186803b15801561071657600080fd5b505afa15801561072a573d6000803e3d6000fd5b505050506040513d602081101561074057600080fd5b5051429063ffffffff6107fd16565b336000908152600160205260409020600201555050565b3360009081526002602052604090205460ff166107c2576040805162461bcd60e51b81526020600482015260156024820152744e6f20736368656d6520696e2070726f677265737360581b604482015290519081900360640190fd5b506001600160a01b03166000908152600260208181526040808420805460ff1916905533845260019182905283208381559081018390550155565b600082820183811015610857576040805162461bcd60e51b815260206004820152601b60248201527f536166654d6174683a206164646974696f6e206f766572666c6f770000000000604482015290519081900360640190fd5b939250505056fea26469706673582212205e2b624bb8a8601deda2042eb9697f3be42fdd13eb00a78e002ea2ebed11a7e464736f6c63430006080033",
  "devdoc": {
    "methods": {}
  },
  "userdoc": {
    "methods": {}
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 4400,
        "contract": "contracts/schemes/Schemes.sol:Schemes",
        "label": "nextSchemeId",
        "offset": 0,
        "slot": "0",
        "type": "t_uint256"
      },
      {
        "astId": 4404,
        "contract": "contracts/schemes/Schemes.sol:Schemes",
        "label": "ongoingSchemes",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_address,t_struct(OngoingScheme)4398_storage)"
      },
      {
        "astId": 4408,
        "contract": "contracts/schemes/Schemes.sol:Schemes",
        "label": "hasOngoingScheme",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 4412,
        "contract": "contracts/schemes/Schemes.sol:Schemes",
        "label": "schemes",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_uint256,t_struct(Scheme)4391_storage)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_struct(OngoingScheme)4398_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct Schemes.OngoingScheme)",
        "numberOfBytes": "32",
        "value": "t_struct(OngoingScheme)4398_storage"
      },
      "t_mapping(t_uint256,t_struct(Scheme)4391_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct Schemes.Scheme)",
        "numberOfBytes": "32",
        "value": "t_struct(Scheme)4391_storage"
      },
      "t_struct(OngoingScheme)4398_storage": {
        "encoding": "inplace",
        "label": "struct Schemes.OngoingScheme",
        "members": [
          {
            "astId": 4393,
            "contract": "contracts/schemes/Schemes.sol:Schemes",
            "label": "schemeId",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 4395,
            "contract": "contracts/schemes/Schemes.sol:Schemes",
            "label": "timeStarted",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 4397,
            "contract": "contracts/schemes/Schemes.sol:Schemes",
            "label": "timeCompleting",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "96"
      },
      "t_struct(Scheme)4391_storage": {
        "encoding": "inplace",
        "label": "struct Schemes.Scheme",
        "members": [
          {
            "astId": 4388,
            "contract": "contracts/schemes/Schemes.sol:Schemes",
            "label": "schemeAddress",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 4390,
            "contract": "contracts/schemes/Schemes.sol:Schemes",
            "label": "isScheme",
            "offset": 20,
            "slot": "0",
            "type": "t_bool"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}