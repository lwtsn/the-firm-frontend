{
  "address": "0xa513E6E4b8f2a923D98304ec87F64353C4D5C853",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_duration",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_experience",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_chanceOfSuccess",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_baseEarning",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_earningBonus",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "string",
          "name": "name",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "who",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "when",
          "type": "uint256"
        }
      ],
      "name": "SchemeCompleted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "string",
          "name": "name",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "who",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "when",
          "type": "uint256"
        }
      ],
      "name": "SchemeStarted",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_who",
          "type": "address"
        }
      ],
      "name": "complete",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "duration",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getScheme",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "_duration",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "_name",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_cashContractAddress",
          "type": "address"
        }
      ],
      "name": "setCashContract",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_playerStatsAddress",
          "type": "address"
        }
      ],
      "name": "setPlayerStats",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_randomNumberGenerator",
          "type": "address"
        }
      ],
      "name": "setRandomNumberGenerator",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_treasuryAddress",
          "type": "address"
        }
      ],
      "name": "setTreasury",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_who",
          "type": "address"
        }
      ],
      "name": "start",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x716ea71e4a35deff27e43fa25f3a06b25b132cd54ca2a0489fdc5092d6c062b4",
  "receipt": {
    "to": null,
    "from": "0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266",
    "contractAddress": "0xa513E6E4b8f2a923D98304ec87F64353C4D5C853",
    "transactionIndex": 0,
    "gasUsed": "470272",
    "logsBloom": "0x
    "blockHash": "0x2c1880410822fe61175d3349e36acf2e7e56679e475f94cd8c7410dc8472a62d",
    "transactionHash": "0x716ea71e4a35deff27e43fa25f3a06b25b132cd54ca2a0489fdc5092d6c062b4",
    "logs": [],
    "blockNumber": 8,
    "cumulativeGasUsed": "470272",
    "status": 1,
    "byzantium": true
  },
  "args": [
    43200,
    500,
    33,
    1000,
    750
  ],
  "numDeployments": 1,
  "solcInputHash": "777582a7632d8a2f42216c352c8ef720",
  "metadata": "{\"compiler\":{\"version\":\"0.8.9+commit.e5eed63a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_duration\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_experience\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_chanceOfSuccess\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_baseEarning\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_earningBonus\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"who\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"when\",\"type\":\"uint256\"}],\"name\":\"SchemeCompleted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"who\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"when\",\"type\":\"uint256\"}],\"name\":\"SchemeStarted\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_who\",\"type\":\"address\"}],\"name\":\"complete\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"duration\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getScheme\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_duration\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_cashContractAddress\",\"type\":\"address\"}],\"name\":\"setCashContract\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_playerStatsAddress\",\"type\":\"address\"}],\"name\":\"setPlayerStats\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_randomNumberGenerator\",\"type\":\"address\"}],\"name\":\"setRandomNumberGenerator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_treasuryAddress\",\"type\":\"address\"}],\"name\":\"setTreasury\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_who\",\"type\":\"address\"}],\"name\":\"start\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/schemes/YieldFarm.sol\":\"YieldFarm\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/AccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (access/AccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAccessControl.sol\\\";\\nimport \\\"../utils/Context.sol\\\";\\nimport \\\"../utils/Strings.sol\\\";\\nimport \\\"../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Contract module that allows children to implement role-based access\\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\\n * members except through off-chain means by accessing the contract event logs. Some\\n * applications may benefit from on-chain enumerability, for those cases see\\n * {AccessControlEnumerable}.\\n *\\n * Roles are referred to by their `bytes32` identifier. These should be exposed\\n * in the external API and be unique. The best way to achieve this is by\\n * using `public constant` hash digests:\\n *\\n * ```\\n * bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\");\\n * ```\\n *\\n * Roles can be used to represent a set of permissions. To restrict access to a\\n * function call, use {hasRole}:\\n *\\n * ```\\n * function foo() public {\\n *     require(hasRole(MY_ROLE, msg.sender));\\n *     ...\\n * }\\n * ```\\n *\\n * Roles can be granted and revoked dynamically via the {grantRole} and\\n * {revokeRole} functions. Each role has an associated admin role, and only\\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\\n *\\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\\n * that only accounts with this role will be able to grant or revoke other\\n * roles. More complex role relationships can be created by using\\n * {_setRoleAdmin}.\\n *\\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\\n * grant and revoke this role. Extra precautions should be taken to secure\\n * accounts that have been granted it.\\n */\\nabstract contract AccessControl is Context, IAccessControl, ERC165 {\\n    struct RoleData {\\n        mapping(address => bool) members;\\n        bytes32 adminRole;\\n    }\\n\\n    mapping(bytes32 => RoleData) private _roles;\\n\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n    /**\\n     * @dev Modifier that checks that an account has a specific role. Reverts\\n     * with a standardized message including the required role.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     *\\n     * _Available since v4.1._\\n     */\\n    modifier onlyRole(bytes32 role) {\\n        _checkRole(role);\\n        _;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IAccessControl).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) public view virtual override returns (bool) {\\n        return _roles[role].members[account];\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `_msgSender()` is missing `role`.\\n     * Overriding this function changes the behavior of the {onlyRole} modifier.\\n     *\\n     * Format of the revert message is described in {_checkRole}.\\n     *\\n     * _Available since v4.6._\\n     */\\n    function _checkRole(bytes32 role) internal view virtual {\\n        _checkRole(role, _msgSender());\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `account` is missing `role`.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     */\\n    function _checkRole(bytes32 role, address account) internal view virtual {\\n        if (!hasRole(role, account)) {\\n            revert(\\n                string(\\n                    abi.encodePacked(\\n                        \\\"AccessControl: account \\\",\\n                        Strings.toHexString(uint160(account), 20),\\n                        \\\" is missing role \\\",\\n                        Strings.toHexString(uint256(role), 32)\\n                    )\\n                )\\n            );\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) public view virtual override returns (bytes32) {\\n        return _roles[role].adminRole;\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been revoked `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) public virtual override {\\n        require(account == _msgSender(), \\\"AccessControl: can only renounce roles for self\\\");\\n\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event. Note that unlike {grantRole}, this function doesn't perform any\\n     * checks on the calling account.\\n     *\\n     * [WARNING]\\n     * ====\\n     * This function should only be called from the constructor when setting\\n     * up the initial roles for the system.\\n     *\\n     * Using this function in any other way is effectively circumventing the admin\\n     * system imposed by {AccessControl}.\\n     * ====\\n     *\\n     * NOTE: This function is deprecated in favor of {_grantRole}.\\n     */\\n    function _setupRole(bytes32 role, address account) internal virtual {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Sets `adminRole` as ``role``'s admin role.\\n     *\\n     * Emits a {RoleAdminChanged} event.\\n     */\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\\n        bytes32 previousAdminRole = getRoleAdmin(role);\\n        _roles[role].adminRole = adminRole;\\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * Internal function without access restriction.\\n     */\\n    function _grantRole(bytes32 role, address account) internal virtual {\\n        if (!hasRole(role, account)) {\\n            _roles[role].members[account] = true;\\n            emit RoleGranted(role, account, _msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * Internal function without access restriction.\\n     */\\n    function _revokeRole(bytes32 role, address account) internal virtual {\\n        if (hasRole(role, account)) {\\n            _roles[role].members[account] = false;\\n            emit RoleRevoked(role, account, _msgSender());\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xb4d87ee2ead4bd192b41c128f287d4b7f24b9e0cd740cc9b476881c461286007\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/IAccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n */\\ninterface IAccessControl {\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     *\\n     * _Available since v3.1._\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {AccessControl-_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) external;\\n}\\n\",\"keccak256\":\"0x59ce320a585d7e1f163cd70390a0ef2ff9cec832e2aa544293a00692465a7a57\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0x24e0364e503a9bbde94c715d26573a76f14cd2a202d45f96f52134ab806b67b9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/ERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/ERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"./extensions/IERC20Metadata.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\\n * instead returning `false` on failure. This behavior is nonetheless\\n * conventional and does not conflict with the expectations of ERC20\\n * applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20 is Context, IERC20, IERC20Metadata {\\n    mapping(address => uint256) private _balances;\\n\\n    mapping(address => mapping(address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}.\\n     *\\n     * The default value of {decimals} is 18. To select a different value for\\n     * {decimals} you should overload it.\\n     *\\n     * All two of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\\n     * overridden;\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual override returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address to, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _transfer(owner, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * NOTE: Does not update the allowance if the current allowance\\n     * is the maximum `uint256`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` and `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``from``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) public virtual override returns (bool) {\\n        address spender = _msgSender();\\n        _spendAllowance(from, spender, amount);\\n        _transfer(from, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, allowance(owner, spender) + addedValue);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        uint256 currentAllowance = allowance(owner, spender);\\n        require(currentAllowance >= subtractedValue, \\\"ERC20: decreased allowance below zero\\\");\\n        unchecked {\\n            _approve(owner, spender, currentAllowance - subtractedValue);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves `amount` of tokens from `sender` to `recipient`.\\n     *\\n     * This internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     */\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {\\n        require(from != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(to != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, amount);\\n\\n        uint256 fromBalance = _balances[from];\\n        require(fromBalance >= amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        unchecked {\\n            _balances[from] = fromBalance - amount;\\n        }\\n        _balances[to] += amount;\\n\\n        emit Transfer(from, to, amount);\\n\\n        _afterTokenTransfer(from, to, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply += amount;\\n        _balances[account] += amount;\\n        emit Transfer(address(0), account, amount);\\n\\n        _afterTokenTransfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        uint256 accountBalance = _balances[account];\\n        require(accountBalance >= amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[account] = accountBalance - amount;\\n        }\\n        _totalSupply -= amount;\\n\\n        emit Transfer(account, address(0), amount);\\n\\n        _afterTokenTransfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Updates `owner` s allowance for `spender` based on spent `amount`.\\n     *\\n     * Does not update the allowance amount in case of infinite allowance.\\n     * Revert if not enough allowance is available.\\n     *\\n     * Might emit an {Approval} event.\\n     */\\n    function _spendAllowance(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        uint256 currentAllowance = allowance(owner, spender);\\n        if (currentAllowance != type(uint256).max) {\\n            require(currentAllowance >= amount, \\\"ERC20: insufficient allowance\\\");\\n            unchecked {\\n                _approve(owner, spender, currentAllowance - amount);\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * has been transferred to `to`.\\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n}\\n\",\"keccak256\":\"0xe0c8b625a79bac0fe80f17cfb521e072805cc9cef1c96a5caf45b264e74812fa\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x9750c6b834f7b43000631af5cc30001c5f547b3ceb3635488f140f60e897ea6b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x8de418a5503946cabe331f35fe242d3201a73f67f77aaeb7110acb1f30423aca\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n}\\n\",\"keccak256\":\"0x32c202bd28995dd20c4347b7c6467a6d3241c74c8ad3edcbb610cd9205916c45\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0xd10975de010d89fd1c78dc5e8a9a7e7f496198085c151648f20cba166b32582b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (utils/math/SafeMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n// CAUTION\\n// This version of SafeMath should only be used with Solidity 0.8 or later,\\n// because it relies on the compiler's built in overflow checks.\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations.\\n *\\n * NOTE: `SafeMath` is generally not needed starting with Solidity 0.8, since the compiler\\n * now has built in overflow checking.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c < a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b > a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n            // benefit is lost if 'b' is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a + b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a * b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b <= a, errorMessage);\\n            return a - b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a / b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a % b;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x0f633a0223d9a1dcccfcf38a64c9de0874dfcbfac0c6941ccf074d63a2ce0e1e\",\"license\":\"MIT\"},\"contracts/Cash.sol\":{\"content\":\"// SPDX-License-Identifier: ISC\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/AccessControl.sol\\\";\\n\\ncontract Cash is AccessControl, ERC20 {\\n    bytes32 public constant ADMIN = keccak256(\\\"ADMIN\\\");\\n    bytes32 public constant CASH_MINTER = keccak256(\\\"CASH_MINTER\\\");\\n\\n    constructor() ERC20(\\\"CASH\\\", \\\"CA$H\\\") {\\n        _setupRole(ADMIN, msg.sender);\\n        _setRoleAdmin(CASH_MINTER, ADMIN);\\n    }\\n\\n    function mint(address _who, uint256 _amount) public onlyCashMinter {\\n        super._mint(_who, _amount);\\n    }\\n\\n    function burn(uint256 _amount) public {\\n        super._burn(msg.sender, _amount);\\n    }\\n\\n    function setCashMinter(address _who) public onlyAdmin {\\n        grantRole(CASH_MINTER, _who);\\n    }\\n\\n    modifier onlyAdmin() {\\n        require(hasRole(ADMIN, msg.sender), \\\"Not Admin\\\");\\n        _;\\n    }\\n\\n    modifier onlyCashMinter() {\\n        require(hasRole(CASH_MINTER, msg.sender), \\\"Not Cash Minter\\\");\\n        _;\\n    }\\n}\\n\",\"keccak256\":\"0x606b20a96cd136bb3499851cb83281ec3a0fe61a81987ec607decd3b7cff5d2e\",\"license\":\"ISC\"},\"contracts/player/Player.sol\":{\"content\":\"// SPDX-License-Identifier: ISC\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/AccessControl.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/math/SafeMath.sol\\\";\\n\\nimport \\\"./PlayerStats.sol\\\";\\n\\ncontract Player is AccessControl {\\n    using SafeMath for uint256;\\n\\n    event PlayerCreated(address _who, uint256 _when);\\n\\n    mapping(address => bool) private accounts;\\n\\n    address private playerStats;\\n\\n    bytes32 public constant ADMIN = keccak256(\\\"ADMIN\\\");\\n\\n    constructor() {\\n        _setupRole(ADMIN, msg.sender);\\n    }\\n\\n    function setPlayerStatsAddress(address _playerStats) public onlyAdmin {\\n        playerStats = _playerStats;\\n    }\\n\\n    function create() public {\\n        require(isPlayer(msg.sender) == false, \\\"Account already exists\\\");\\n\\n        accounts[msg.sender] = true;\\n\\n        PlayerStats(playerStats).createBasePlayer(msg.sender);\\n\\n        emit PlayerCreated(msg.sender, block.timestamp);\\n    }\\n\\n    function isPlayer(address _who) public view returns (bool) {\\n        return accounts[_who];\\n    }\\n\\n    modifier onlyAdmin() {\\n        require(hasRole(ADMIN, msg.sender), \\\"Not Admin\\\");\\n        _;\\n    }\\n\\n    modifier hasAccount(address _who) {\\n        require(isPlayer(_who), \\\"Account does not exist\\\");\\n        _;\\n    }\\n}\\n\",\"keccak256\":\"0xdc176b673a047302dc5f2544405c0734ac6e5da394396b193d3e4e1536cb334e\",\"license\":\"ISC\"},\"contracts/player/PlayerStats.sol\":{\"content\":\"// SPDX-License-Identifier: ISC\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/access/AccessControl.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/math/SafeMath.sol\\\";\\n\\n//https://thatsallgames.com/2019/02/05/the-anatomy-of-rpgs-part-1-stats/\\ncontract PlayerStats is AccessControl {\\n    using SafeMath for uint256;\\n\\n    event PlayerBattleStatsUpdated (\\n        address who,\\n        uint256 strengthIncrease,\\n        uint256 dexterityIncrease,\\n        uint256 defenceIncrease,\\n        uint256 constitutionIncrease\\n    );\\n\\n    event PlayerFarmingStatsUpdated (\\n        address who,\\n        uint256 degeneracyIncrease,\\n        uint256 chadaryIncrease,\\n        uint256 unrekableIncrease\\n    );\\n\\n    struct Stats {\\n        uint256 level;\\n        uint256 experience;\\n        uint256 baseHealth;\\n        uint256 currentHealth; // todo need to work out regeneration rate\\n        bool isPlayer;\\n        BattleStats battleStats;\\n        FarmingStats farmingStats;\\n    }\\n\\n    struct BattleStats {\\n        uint256 baseStrength; // attack\\n        uint256 baseDexterity; // speed\\n        uint256 baseDefence; // defence\\n        uint256 baseConstitution; // health\\n    }\\n\\n    struct FarmingStats {\\n        uint256 chadary; // Necessary for higher \\\"Legitimate\\\" jobs but you earn more in \\\"Degenerate\\\" jobs\\n        uint256 degeneracy; // Necessary for higher \\\"Degenerate\\\" jobs but you earn more in \\\"Criminal\\\" jobs\\n        uint256 unrekable; // Necessary for higher \\\"Criminal\\\" jobs but you earn more in \\\"Legitimate\\\" jobs\\n    }\\n\\n    mapping(address => Stats) playerStats;\\n    address public playerManager;\\n\\n    bytes32 public constant ADMIN = keccak256(\\\"ADMIN\\\");\\n    bytes32 public constant PLAYER_MANAGER = keccak256(\\\"PLAYER_MANAGER\\\");\\n\\n    constructor() {\\n        _setupRole(ADMIN, msg.sender);\\n        _setRoleAdmin(PLAYER_MANAGER, ADMIN);\\n    }\\n\\n    function setPlayerManager(address _playerManager) public onlyAdmin {\\n        grantRole(PLAYER_MANAGER, _playerManager);\\n    }\\n\\n    function createBasePlayer(address _who) public onlyNewPlayer(_who) onlyPlayerManager {\\n        uint256 defaultBattleStats = 20 * 1 ether;\\n\\n        BattleStats memory battleStats = BattleStats({\\n        baseStrength : defaultBattleStats,\\n        baseDexterity : defaultBattleStats,\\n        baseDefence : defaultBattleStats,\\n        baseConstitution : defaultBattleStats\\n        });\\n\\n        FarmingStats memory farmingStats = FarmingStats({degeneracy : 0, chadary : 0, unrekable : 0});\\n\\n        playerStats[_who] = Stats({\\n        level : 1,\\n        experience : 0,\\n        baseHealth : 100,\\n        currentHealth : 100,\\n        battleStats : battleStats,\\n        farmingStats : farmingStats,\\n        isPlayer : true\\n        });\\n    }\\n\\n    function getPlayerStats(address _who)\\n    public\\n    view\\n    returns (\\n        uint256 level,\\n        uint256 experience,\\n        uint256 baseHealth,\\n        uint256 currentHealth,\\n        bool isPlayer\\n    )\\n    {\\n        Stats memory stats = playerStats[_who];\\n        return (stats.level, stats.experience, stats.baseHealth, stats.currentHealth, stats.isPlayer);\\n    }\\n\\n    function getPlayerBattleStats(address _who)\\n    public\\n    view\\n    returns (\\n        uint256 baseStrength,\\n        uint256 baseDexterity,\\n        uint256 baseDefence,\\n        uint256 baseConstitution\\n    )\\n    {\\n        BattleStats memory stats = playerStats[_who].battleStats;\\n\\n        return (stats.baseStrength, stats.baseDexterity, stats.baseDefence, stats.baseConstitution);\\n    }\\n\\n    function getPlayerFarmingStats(address _who)\\n    public\\n    view\\n    returns (\\n        uint256 _degeneracy,\\n        uint256 _chadary,\\n        uint256 _unrekable\\n    )\\n    {\\n        FarmingStats memory stats = playerStats[_who].farmingStats;\\n\\n        return (stats.degeneracy, stats.chadary, stats.unrekable);\\n    }\\n\\n    function increaseFarmingStats(\\n        address _who,\\n        uint256 _chadary,\\n        uint256 _degeneracy,\\n        uint256 _unrekable\\n    ) public onlyPlayerManager existingPlayer(_who) {\\n        emit PlayerFarmingStatsUpdated(_who, _chadary, _degeneracy, _unrekable);\\n\\n        playerStats[_who].farmingStats.chadary = playerStats[_who].farmingStats.chadary.add(_chadary);\\n        playerStats[_who].farmingStats.degeneracy = playerStats[_who].farmingStats.degeneracy.add(_degeneracy);\\n        playerStats[_who].farmingStats.unrekable = playerStats[_who].farmingStats.unrekable.add(_unrekable);\\n    }\\n\\n    function increaseBattleStats(\\n        address _who,\\n        uint256 _strength,\\n        uint256 _dexterity,\\n        uint256 _defence,\\n        uint256 _constitution\\n    ) public onlyPlayerManager existingPlayer(_who) {\\n        emit PlayerBattleStatsUpdated(_who, _strength, _dexterity, _defence, _constitution);\\n\\n        playerStats[_who].battleStats.baseStrength = playerStats[_who].battleStats.baseStrength.add(_strength);\\n        playerStats[_who].battleStats.baseDexterity = playerStats[_who].battleStats.baseDexterity.add(_dexterity);\\n        playerStats[_who].battleStats.baseDefence = playerStats[_who].battleStats.baseDefence.add(_defence);\\n        playerStats[_who].battleStats.baseConstitution = playerStats[_who].battleStats.baseConstitution.add(\\n            _constitution\\n        );\\n    }\\n\\n    modifier onlyNewPlayer(address _who) {\\n        require(playerStats[_who].isPlayer == false, \\\"Player already exists\\\");\\n        _;\\n    }\\n\\n    modifier existingPlayer(address _who) {\\n        require(playerStats[_who].isPlayer, \\\"Player doesn't exist\\\");\\n        _;\\n    }\\n\\n    modifier onlyPlayerManager() {\\n        require(hasRole(PLAYER_MANAGER, msg.sender), \\\"Not Player Manager\\\");\\n        _;\\n    }\\n\\n    modifier onlyAdmin() {\\n        require(hasRole(ADMIN, msg.sender), \\\"Not Admin\\\");\\n        _;\\n    }\\n}\\n\",\"keccak256\":\"0x526cb75c6a532a70a83b86839cfe12be599a6ccb731882387dd8ee73fe6cb02e\",\"license\":\"ISC\"},\"contracts/player/Treasury.sol\":{\"content\":\"// SPDX-License-Identifier: ISC\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/access/AccessControl.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/math/SafeMath.sol\\\";\\n\\nimport \\\"../Cash.sol\\\";\\n\\ncontract Treasury is AccessControl {\\n    using SafeMath for uint256;\\n\\n    bytes32 public constant ADMIN = keccak256(\\\"ADMIN\\\");\\n    bytes32 public constant CASH_SPENDER = keccak256(\\\"CASH_SPENDER\\\");\\n\\n    address private cashAddress;\\n    mapping(address => uint256) public balances;\\n\\n    constructor() {\\n        _setupRole(ADMIN, msg.sender);\\n        _setRoleAdmin(CASH_SPENDER, ADMIN);\\n    }\\n\\n    function setCashAddress(address _cashAddress) public onlyAdmin {\\n        cashAddress = _cashAddress;\\n    }\\n\\n    function setCashSpender(address _who) public onlyAdmin {\\n        grantRole(CASH_SPENDER, _who);\\n    }\\n\\n    // todo is needed\\n    function depositCash(uint256 _amount) public onlyCashSpender {\\n        require(Cash(cashAddress).balanceOf(tx.origin) >= _amount, \\\"Insufficient funds\\\");\\n\\n        Cash(cashAddress).transferFrom(msg.sender, address(this), _amount);\\n        balances[msg.sender] = balances[msg.sender].add(_amount);\\n    }\\n\\n    // todo is needed\\n    function depositCashTo(address _who, uint256 _amount) public {\\n        require(Cash(cashAddress).balanceOf(msg.sender) >= _amount, \\\"Insufficient funds\\\");\\n\\n        Cash(cashAddress).transferFrom(msg.sender, address(this), _amount);\\n        balances[_who] = balances[_who].add(_amount);\\n    }\\n\\n    // todo is needed\\n    function spendCash(address _who, uint256 _amount) public onlyCashSpender {\\n        require(Cash(cashAddress).balanceOf(tx.origin) >= _amount, \\\"Insufficient funds\\\");\\n\\n        Cash(cashAddress).transferFrom(tx.origin, address(this), _amount);\\n\\n        Cash(cashAddress).burn(_amount);\\n    }\\n\\n    modifier onlyAdmin() {\\n        require(hasRole(ADMIN, msg.sender), \\\"Not Admin\\\");\\n        _;\\n    }\\n\\n    modifier onlyCashSpender() {\\n        require(hasRole(CASH_SPENDER, msg.sender), \\\"Not Cash Spender\\\");\\n        _;\\n    }\\n}\\n\",\"keccak256\":\"0x9eb7915bba62d3ad4f68289ddb50061764cec2a8878d68de290a1f8df35159ff\",\"license\":\"ISC\"},\"contracts/schemes/BaseScheme.sol\":{\"content\":\"// SPDX-License-Identifier: ISC\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Random.sol\\\";\\nimport \\\"../Cash.sol\\\";\\nimport \\\"../player/Treasury.sol\\\";\\nimport \\\"../player/Player.sol\\\";\\n\\nabstract contract BaseScheme {\\n    uint256 constant MAX_UINT = 2**256 - 1;\\n\\n    event SchemeStarted(string name, address who, uint256 when);\\n    event SchemeCompleted(string name, address who, uint256 when);\\n\\n    uint256 public duration;\\n    uint256 internal experience;\\n    uint256 internal successChance;\\n\\n    address internal randomNumberGenerator;\\n    address internal cashContract;\\n    address internal treasuryAddress;\\n    address internal playerStatsAddress;\\n\\n    constructor(\\n        uint256 _duration,\\n        uint256 _experience,\\n        uint256 _successChance\\n    ) {\\n        duration = _duration;\\n        experience = _experience;\\n        successChance = _successChance;\\n    }\\n\\n    function setRandomNumberGenerator(address _randomNumberGenerator) public {\\n        randomNumberGenerator = _randomNumberGenerator;\\n    }\\n\\n    function setCashContract(address _cashContractAddress) public {\\n        cashContract = _cashContractAddress;\\n        Cash(cashContract).approve(treasuryAddress, MAX_UINT);\\n    }\\n\\n    function setTreasury(address _treasuryAddress) public {\\n        treasuryAddress = _treasuryAddress;\\n    }\\n\\n    function setPlayerStats(address _playerStatsAddress) public {\\n        playerStatsAddress = _playerStatsAddress;\\n    }\\n\\n    function start(address _who) public virtual {\\n        emit SchemeStarted(getSchemeName(), _who, block.timestamp);\\n    }\\n\\n    function complete(address _who) public virtual onlySchemeManager {}\\n\\n    function getSchemeName() internal pure virtual returns (string memory) {\\n        return \\\"\\\";\\n    }\\n\\n    function getSuccessGauge() internal virtual returns (uint256 _successGauge) {\\n        return Random(randomNumberGenerator).random(100);\\n    }\\n\\n    function increaseStats(\\n        address _who,\\n        uint256 _chadary,\\n        uint256 _degeneracy,\\n        uint256 _unrekable\\n    ) internal {\\n        PlayerStats(playerStatsAddress).increaseFarmingStats(_who, _chadary, _degeneracy, _unrekable);\\n    }\\n\\n    function mint(address _who, uint256 _amount) internal {\\n        Cash(cashContract).mint(address(this), _amount);\\n        Treasury(treasuryAddress).depositCashTo(_who, _amount);\\n    }\\n\\n    function getScheme() public view returns (uint256 _duration, string memory _name) {\\n        return (duration, getSchemeName());\\n    }\\n\\n    modifier onlySchemeManager() {\\n        require(true);\\n        _;\\n    }\\n}\\n\",\"keccak256\":\"0x8be3d05da84a6df8cb6fa7115c4b7aa6ffe862701e4482b9516f06fb0843e4f3\",\"license\":\"ISC\"},\"contracts/schemes/YieldFarm.sol\":{\"content\":\"// SPDX-License-Identifier: ISC\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./BaseScheme.sol\\\";\\n\\ncontract YieldFarm is BaseScheme {\\n    uint256 baseEarning;\\n    uint256 earningBonus;\\n\\n    constructor(\\n        uint256 _duration,\\n        uint256 _experience,\\n        uint256 _chanceOfSuccess,\\n        uint256 _baseEarning,\\n        uint256 _earningBonus\\n    ) BaseScheme(_duration, _experience, _chanceOfSuccess) {\\n        baseEarning = _baseEarning;\\n        earningBonus = _earningBonus;\\n    }\\n\\n    function start(address _who) public override {\\n        super.start(_who);\\n    }\\n\\n    function complete(address _who) public override {\\n        uint256 successGauge = getSuccessGauge();\\n\\n        if (successChance >= successGauge) {\\n            mint(_who, 33);\\n        } else {}\\n    }\\n\\n    function getSchemeName() internal pure override returns (string memory) {\\n        return \\\"Yield farm\\\";\\n    }\\n}\\n\",\"keccak256\":\"0xff0d39a9a6c6cf7b92e759b7d93c61c12ae4d74b4d27607c0f1fb6f9e5b65b96\",\"license\":\"ISC\"},\"contracts/utils/Random.sol\":{\"content\":\"// SPDX-License-Identifier: ISC\\n\\npragma solidity ^0.8.0;\\n\\ncontract Random {\\n    uint64 _seed = 23456789876543;\\n\\n    function random(uint64 upper) public returns (uint256 randomNumber) {\\n        return uint256(keccak256(abi.encodePacked(block.timestamp, block.coinbase, _seed))) % upper;\\n    }\\n}\\n\",\"keccak256\":\"0x55926d10aa9c97260cdc53cd81e9c7293c7a9d3125f715b7e01f530a871980f0\",\"license\":\"ISC\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b5060405161061738038061061783398101604081905261002f91610049565b600094909455600192909255600255600755600855610089565b600080600080600060a0868803121561006157600080fd5b5050835160208501516040860151606087015160809097015192989197509594509092509050565b61057f806100986000396000f3fe608060405234801561001057600080fd5b50600436106100885760003560e01c8063d07f8a431161005b578063d07f8a4314610101578063dd0b281e14610131578063f0f4426014610144578063ff83298a1461017457600080fd5b80630fb5a6b41461008d57806350fc2964146100a957806393af0292146100db5780639ecb7c41146100ee575b600080fd5b61009660005481565b6040519081526020015b60405180910390f35b6100d96100b7366004610442565b600680546001600160a01b0319166001600160a01b0392909216919091179055565b005b6100d96100e9366004610442565b61018a565b6100d96100fc366004610442565b6101ae565b6100d961010f366004610442565b600380546001600160a01b0319166001600160a01b0392909216919091179055565b6100d961013f366004610442565b610249565b6100d9610152366004610442565b600580546001600160a01b0319166001600160a01b0392909216919091179055565b61017c610255565b6040516100a09291906104bf565b600061019461028b565b905080600254106101aa576101aa82602161030f565b5050565b600480546001600160a01b0319166001600160a01b03838116918217835560055460405163095ea7b360e01b815291169281019290925260001960248301529063095ea7b390604401602060405180830381600087803b15801561021157600080fd5b505af1158015610225573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906101aa91906104e0565b610252816103de565b50565b6000606060005461028360408051808201909152600a8152695969656c64206661726d60b01b602082015290565b915091509091565b600354604051631a1a799360e01b8152606460048201526000916001600160a01b031690631a1a799390602401602060405180830381600087803b1580156102d257600080fd5b505af11580156102e6573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061030a9190610502565b905090565b600480546040516340c10f1960e01b81523092810192909252602482018390526001600160a01b0316906340c10f1990604401600060405180830381600087803b15801561035c57600080fd5b505af1158015610370573d6000803e3d6000fd5b5050600554604051632913b8c560e21b81526001600160a01b03868116600483015260248201869052909116925063a44ee3149150604401600060405180830381600087803b1580156103c257600080fd5b505af11580156103d6573d6000803e3d6000fd5b505050505050565b7f770ec39a627afda6de8b8d68f80104e297a2cd74a7544ee4f52b4912705c260861042660408051808201909152600a8152695969656c64206661726d60b01b602082015290565b82426040516104379392919061051b565b60405180910390a150565b60006020828403121561045457600080fd5b81356001600160a01b038116811461046b57600080fd5b9392505050565b6000815180845260005b818110156104985760208185018101518683018201520161047c565b818111156104aa576000602083870101525b50601f01601f19169290920160200192915050565b8281526040602082015260006104d86040830184610472565b949350505050565b6000602082840312156104f257600080fd5b8151801515811461046b57600080fd5b60006020828403121561051457600080fd5b5051919050565b60608152600061052e6060830186610472565b6001600160a01b03949094166020830152506040015291905056fea264697066735822122027cd283c79da26d963d66272b7c4d189ce54e85fd22cf31fcfdc6d7ee9a06abf64736f6c63430008090033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100885760003560e01c8063d07f8a431161005b578063d07f8a4314610101578063dd0b281e14610131578063f0f4426014610144578063ff83298a1461017457600080fd5b80630fb5a6b41461008d57806350fc2964146100a957806393af0292146100db5780639ecb7c41146100ee575b600080fd5b61009660005481565b6040519081526020015b60405180910390f35b6100d96100b7366004610442565b600680546001600160a01b0319166001600160a01b0392909216919091179055565b005b6100d96100e9366004610442565b61018a565b6100d96100fc366004610442565b6101ae565b6100d961010f366004610442565b600380546001600160a01b0319166001600160a01b0392909216919091179055565b6100d961013f366004610442565b610249565b6100d9610152366004610442565b600580546001600160a01b0319166001600160a01b0392909216919091179055565b61017c610255565b6040516100a09291906104bf565b600061019461028b565b905080600254106101aa576101aa82602161030f565b5050565b600480546001600160a01b0319166001600160a01b03838116918217835560055460405163095ea7b360e01b815291169281019290925260001960248301529063095ea7b390604401602060405180830381600087803b15801561021157600080fd5b505af1158015610225573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906101aa91906104e0565b610252816103de565b50565b6000606060005461028360408051808201909152600a8152695969656c64206661726d60b01b602082015290565b915091509091565b600354604051631a1a799360e01b8152606460048201526000916001600160a01b031690631a1a799390602401602060405180830381600087803b1580156102d257600080fd5b505af11580156102e6573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061030a9190610502565b905090565b600480546040516340c10f1960e01b81523092810192909252602482018390526001600160a01b0316906340c10f1990604401600060405180830381600087803b15801561035c57600080fd5b505af1158015610370573d6000803e3d6000fd5b5050600554604051632913b8c560e21b81526001600160a01b03868116600483015260248201869052909116925063a44ee3149150604401600060405180830381600087803b1580156103c257600080fd5b505af11580156103d6573d6000803e3d6000fd5b505050505050565b7f770ec39a627afda6de8b8d68f80104e297a2cd74a7544ee4f52b4912705c260861042660408051808201909152600a8152695969656c64206661726d60b01b602082015290565b82426040516104379392919061051b565b60405180910390a150565b60006020828403121561045457600080fd5b81356001600160a01b038116811461046b57600080fd5b9392505050565b6000815180845260005b818110156104985760208185018101518683018201520161047c565b818111156104aa576000602083870101525b50601f01601f19169290920160200192915050565b8281526040602082015260006104d86040830184610472565b949350505050565b6000602082840312156104f257600080fd5b8151801515811461046b57600080fd5b60006020828403121561051457600080fd5b5051919050565b60608152600061052e6060830186610472565b6001600160a01b03949094166020830152506040015291905056fea264697066735822122027cd283c79da26d963d66272b7c4d189ce54e85fd22cf31fcfdc6d7ee9a06abf64736f6c63430008090033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 5112,
        "contract": "contracts/schemes/YieldFarm.sol:YieldFarm",
        "label": "duration",
        "offset": 0,
        "slot": "0",
        "type": "t_uint256"
      },
      {
        "astId": 5114,
        "contract": "contracts/schemes/YieldFarm.sol:YieldFarm",
        "label": "experience",
        "offset": 0,
        "slot": "1",
        "type": "t_uint256"
      },
      {
        "astId": 5116,
        "contract": "contracts/schemes/YieldFarm.sol:YieldFarm",
        "label": "successChance",
        "offset": 0,
        "slot": "2",
        "type": "t_uint256"
      },
      {
        "astId": 5118,
        "contract": "contracts/schemes/YieldFarm.sol:YieldFarm",
        "label": "randomNumberGenerator",
        "offset": 0,
        "slot": "3",
        "type": "t_address"
      },
      {
        "astId": 5120,
        "contract": "contracts/schemes/YieldFarm.sol:YieldFarm",
        "label": "cashContract",
        "offset": 0,
        "slot": "4",
        "type": "t_address"
      },
      {
        "astId": 5122,
        "contract": "contracts/schemes/YieldFarm.sol:YieldFarm",
        "label": "treasuryAddress",
        "offset": 0,
        "slot": "5",
        "type": "t_address"
      },
      {
        "astId": 5124,
        "contract": "contracts/schemes/YieldFarm.sol:YieldFarm",
        "label": "playerStatsAddress",
        "offset": 0,
        "slot": "6",
        "type": "t_address"
      },
      {
        "astId": 5887,
        "contract": "contracts/schemes/YieldFarm.sol:YieldFarm",
        "label": "baseEarning",
        "offset": 0,
        "slot": "7",
        "type": "t_uint256"
      },
      {
        "astId": 5889,
        "contract": "contracts/schemes/YieldFarm.sol:YieldFarm",
        "label": "earningBonus",
        "offset": 0,
        "slot": "8",
        "type": "t_uint256"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}